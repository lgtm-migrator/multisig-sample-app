{"version":3,"sources":["constants.ts","images/rifWhite.svg","images/powered-by-iov.svg","pages/start/ConnectWalletComponent.tsx","images/rifGray.svg","components/ConnectedBar.tsx","pages/safeInteraction/Navigation.tsx","helpers/localStorage.ts","components/Modal.tsx","config/index.ts","helpers/safeServiceClient.ts","helpers/transactionListener.ts","images/loading.svg","components/ViewExplorerButton.tsx","components/LoadingComponent.tsx","pages/safeInteraction/transactions/ApprovedModal.tsx","pages/safeInteraction/transactions/ExecutedModal.tsx","pages/safeInteraction/transactions/PublishedModal.tsx","components/CopyValueButton.tsx","components/ValueWithButtons.tsx","images/refresh.svg","pages/safeInteraction/transactions/TransactionDetailComponent.tsx","pages/safeInteraction/transactions/TransactionMenu.tsx","pages/safeInteraction/transactions/TransactionTabHelperText.tsx","pages/safeInteraction/transactions/index.tsx","pages/safeInteraction/Dashboard.tsx","components/ThresholdDropdown.tsx","pages/safeInteraction/policies/ChangeThresholdModal.tsx","pages/safeInteraction/policies/AddOwnerModal.tsx","pages/safeInteraction/policies/RemoveOwnerModal.tsx","pages/safeInteraction/policies/SwapOwnerModal.tsx","images/delete.svg","images/swap.svg","images/edit.svg","pages/safeInteraction/policies/index.tsx","pages/safeInteraction/assets/TransferValueModal.tsx","pages/safeInteraction/assets/TransferTokenModal.tsx","pages/safeInteraction/assets/index.tsx","components/TransactionCreatedModal.tsx","pages/safeInteraction/index.tsx","pages/connectToSafe/CreateSafeComponent.tsx","pages/connectToSafe/ConnectToSafeComponent.tsx","pages/connectToSafe/index.tsx","components/FooterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TransactionStatus","Screens","Web3Provider","rLogin","setRLoginResponse","handleError","className","src","rifSafeLogo","alt","onClick","connect","then","rLoginResponse","Promise","all","provider","request","method","response","parseInt","catch","poweredByLogo","ConnectedBar","walletAddress","chainId","rifGray","slice","length","id","chainIdtoString","LocalStorageKeys","Navigation","changeActive","handleLogout","selected","NavigationItem","name","toString","toLowerCase","style","textTransform","DASHBOARD","TRANSACTIONS","ASSETS","POLICY","map","Modal","handleClose","children","getContracts","rinkeby","testnet","local","toEthereumChecksum","address","toChecksumAddress","getSafeService","safe","getChainId","SafeServiceClient","safeTransactionService","getTransactions","safeNonce","safeService","getMultisigTransactions","getAddress","value","results","transaction","transactionResponse","SafeTransaction","to","data","safeTxGas","baseGas","gasPrice","nonce","operation","gasToken","refundReceiver","isReject","status","PENDING","isExecuted","EXECUTED","REJECTED","hash","safeTxHash","isPublished","convertToBundle","sort","a","b","transactionListener","web3Provider","tx","resolve","reject","checkInterval","setInterval","getTransactionReceipt","clearInterval","Error","err","ViewExplorerButton","url","href","target","rel","xmlns","width","height","viewBox","fill","fillRule","d","LoadingComponent","text","loadingImage","ApprovedModal","ExecutedModal","PublishedModal","CopyButton","copyTextField","useRef","type","current","select","document","execCommand","defaultValue","ref","position","left","ValueWithButtons","CopyValueButton","TransactionDetailComponent","transactionBundle","approveTransaction","executeTransaction","rejectTransaction","publishTransaction","useState","showDetails","setShowDetails","signatures","setSignatures","threshold","setThreshold","isRefreshing","setIsRefreshing","formatted","setFormatted","useEffect","getApprovals","InputDataDecoder","safeAbi","decodeData","erc20Abi","getThreshold","safeThreshold","offChain","Array","from","keys","signature","isOnChain","getOwnersWhoApprovedTx","signers","onChainSigners","finally","handleApprove","onChain","walletHasSigned","filter","canExecute","colSpan","refreshIcon","disabled","JSON","stringify","approval","TransactionMenu","handleClick","MenuItem","TransactionTabHelperText","count","screen","TransactionsPanel","updateTransactionBundle","addTransaction","transactions","showApprovedModal","setShowApprovedModal","approvedOffChainModal","setApprovedOffChainModal","showExecutedModal","setShowExecutedModal","showPublishedModal","setShowPublishedModal","currentSubTab","setCurrentSubTab","currentTransactions","setCurrentTransactions","setSafeNonce","changeCurrentTab","tran","getNonce","createRejectionTransaction","rejectTx","approveTransactionHash","approveTransactionOffChain","bundle","getTransactionHash","result","getProvider","receipt","transactionHash","signTransaction","handleExecutionTransaction","getSigner","signerAddress","get","proposeTransaction","publishPendingTransaction","currentNonce","isPending","hasDuplicate","t","undefined","Dashboard","balance","setBalance","setNonce","getBalance","ThresholdDropdown","onChange","numberOfOwners","options","index","push","evt","number","ChangeThresholdModal","currentThreshold","handleSubmit","newThreshold","setNewThreshold","AddOwnerModal","newOwner","setNewOwner","isAddress","RemoveOwnerModal","removeAddress","SwapOwnerModal","oldAddress","PolicyComponent","owners","setOwners","addNewOwner","setAddNewOwner","changeThreshold","setChangeThreshold","removeOwner","setRemoveOwner","swapOwner","setSwapOwner","getOwners","afterTransaction","owner","deleteIcon","swapIcon","editIcon","getChangeThresholdTx","getAddOwnerTx","getRemoveOwnerTx","getSwapOwnerTx","TransferValueModal","createTransaction","amount","setTransaction","formattedData","TransferTokenModal","token","symbol","AssetsComponent","showTransfer","setShowTransfer","showTokenTransfer","setShowTokenTransfer","tokens","setTokens","getSafeBalance","getERC2Balance","decimals","contractAddress","rifToken","signer","Contract","balanceOf","updateToken","Math","pow","newTokenList","find","findToken","console","log","ERC20TransactionBuilder","create","txBuilder","bigAmount","BigNumber","mul","transfer","TransactionCreatedModal","closeModal","changeScreen","SafeInteraction","selectedTab","setSelectedTab","showTransactionInfo","setShowTransactionInfo","appNonce","setAppNonce","bundles","setTransactions","incomingTransaction","nonceSorted","list","CreateSafeComponent","connectAddress","createSafe","addresses","setAddresses","changeAddressValue","changeIndex","replace","updateList","item","_item","items","loopOptions","errorList","forEach","ConnectToSafeComponent","connectToSafe","pastSafes","safeAddress","setSafeAddress","setJsonKey","key","localStorage","setItem","setKey","getKey","content","getItem","parse","ChooseSafe","handleSetSafe","isCreate","setIsCreate","isLoading","setIsLoading","setPastSafes","SAFES","contracts","ethers","providers","EthersSafeFactory","proxyFactoryAddress","safeSingletonAddress","EthersSafe","FooterComponent","version","RLogin","cacheProvider","supportedChains","App","error","setError","setSafe","setAddress","setChainId","message","on","accounts","safes","includes","saveSafeAddresToLocalStorage","disconnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88a7dcb6.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n\nexport enum TransactionStatus {\n  PENDING = 'Pending',\n  EXECUTED = 'Executed',\n  REJECTED = 'Rejected'\n}\n\nexport enum Screens {\n  DASHBOARD = 'DASHBOARD',\n  TRANSACTIONS = 'TRANSACTIONS',\n  ASSETS = 'ASSETS',\n  POLICY = 'POLICY'\n}\n","export default __webpack_public_path__ + \"static/media/rifWhite.85d0f2d8.svg\";","export default __webpack_public_path__ + \"static/media/powered-by-iov.a0397e40.svg\";","import React from 'react'\nimport { RLoginButton } from '@rsksmart/rlogin'\nimport rifSafeLogo from '../../images/rifWhite.svg'\nimport poweredByLogo from '../../images/powered-by-iov.svg'\n\ninterface Interface {\n  rLogin: any\n  setRLoginResponse: (response: any, address: string, chainId: number) => void\n  handleError: (error: Error) => void\n}\n\nconst Web3Provider: React.FC<Interface> = ({ rLogin, setRLoginResponse, handleError }) => {\n  const handleLogin = () =>\n    rLogin.connect()\n      .then((rLoginResponse: any) => {\n        Promise.all([\n          rLoginResponse.provider.request({ method: 'eth_accounts' }),\n          rLoginResponse.provider.request({ method: 'eth_chainId' })\n        ]).then((response: any) => {\n          setRLoginResponse(rLoginResponse, response[0][0], parseInt(response[1]))\n        })\n      })\n      .catch(handleError)\n\n  return (\n    <section className=\"login\">\n      <div className=\"logo\">\n        <img src={rifSafeLogo} alt=\"RIF\" />\n        Safe and Vault Sample App\n      </div>\n      <h2>Login with your wallet</h2>\n      <p><RLoginButton onClick={handleLogin}>Connect with rLogin!</RLoginButton></p>\n      <img src={poweredByLogo} alt=\"Powered by IOV Labs\" />\n      <p className=\"legal\">Copyright © 2021 IOV Labs. All rights reserved.</p>\n    </section>\n  )\n}\n\nexport default Web3Provider\n","export default __webpack_public_path__ + \"static/media/rifGray.3588d3de.svg\";","import React from 'react'\nimport rifGray from '../images/rifGray.svg'\n\ninterface Interface {\n  chainId: number | null\n  walletAddress: string | null\n}\n\nconst ConnectedBar: React.FC<Interface> = ({ walletAddress, chainId }) => {\n  const chainIdtoString = (id: number) => {\n    switch (id) {\n      case 4: return 'Rinkeby Testnet'\n      case 31: return 'RSK Testnet'\n      case 30: return 'RSK Mainnet'\n      default: return 'Local'\n    }\n  }\n  return (\n    <section className=\"header\">\n      <ul className=\"inline\">\n        <li className=\"logo\">\n          <img src={rifGray} alt=\"RIF Safe\" />\n          Safe and Vault Sample App\n        </li>\n        {walletAddress && (\n          <li className=\"address\">\n            {`${walletAddress.slice(0, 8)}...${walletAddress.slice(walletAddress.length - 6)}`}\n          </li>\n        )}\n        <li className=\"chainId\"><span>{chainId && chainIdtoString(chainId)}</span></li>\n      </ul>\n    </section>\n  )\n}\n\nexport default ConnectedBar\n","import React from 'react'\nimport { Screens } from '../../constants'\n\ninterface Interface {\n  handleLogout: () => void\n  changeActive: (screen: Screens) => void\n  selected: Screens\n}\n\nconst Navigation: React.FC<Interface> = ({ changeActive, handleLogout, selected }) => {\n  const NavigationItem: React.FC<{ name: Screens }> = ({ name }) => {\n    const toString = name.toString().toLowerCase()\n    return (\n      <li>\n        <button\n          style={{ textTransform: 'capitalize' }}\n          className={selected === name ? `selected ${toString}` : toString}\n          onClick={() => changeActive(name)}\n        >{toString}</button>\n      </li>\n    )\n  }\n\n  return (\n    <ul className=\"navigation\">\n      {[Screens.DASHBOARD, Screens.TRANSACTIONS, Screens.ASSETS, Screens.POLICY]\n        .map((name: Screens) =>\n          <NavigationItem key={name} name={name} />\n        )}\n      <li className=\"logout\"><button onClick={handleLogout}>Disconnect Wallet</button></li>\n    </ul>\n  )\n}\n\nexport default Navigation\n","/* eslint-disable no-unused-vars */\nexport enum LocalStorageKeys {\n  SAFES = 'SAFES',\n  TRANSACTIONS = 'TRANSACTIONS'\n}\n\nconst setKey = (key: string, value: string) =>\n  localStorage.setItem(key, value)\n\nconst setJsonKey = (key: LocalStorageKeys, chainId: number, value: any) =>\n  setKey(`${key}_${chainId.toString()}`, JSON.stringify(value))\n\nexport const getKey = (key: LocalStorageKeys, chainId: number) => {\n  const content = localStorage.getItem(`${key}_${chainId.toString()}`)\n  return content ? JSON.parse(content) : null\n}\n\nexport const saveSafeAddresToLocalStorage = (safeAddress: string, chainId: number) => {\n  const safes = getKey(LocalStorageKeys.SAFES, chainId)\n  if (!safes) {\n    return setJsonKey(LocalStorageKeys.SAFES, chainId, [safeAddress.toLowerCase()])\n  }\n\n  return !safes.includes(safeAddress.toLowerCase())\n    ? setJsonKey(LocalStorageKeys.SAFES, chainId, [...safes, safeAddress.toLowerCase()])\n    : null\n}\n","import React, { ReactNode } from 'react'\n\ninterface Interface {\n  handleClose?: () => void\n  children: ReactNode\n}\n\nconst Modal: React.FC<Interface> = ({ handleClose, children }) => {\n  return (\n    <div className=\"modal\">\n      <div className=\"modalBody\">\n        <div className=\"modalHeader\">\n          {handleClose && <button className=\"close\" onClick={handleClose}>x</button>}\n        </div>\n        <div className=\"modalContent\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal\n","import local from './local.json'\nimport testnet from './testnet.json'\nimport rinkeby from './rinkeby.json'\n\nexport const getContracts = (chainId: number) => {\n  switch (chainId) {\n    case 4: return rinkeby\n    case 31: return testnet\n    default: return local\n  }\n}\n","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport SafeServiceClient, { SafeMultisigTransactionListResponse, SafeMultisigTransactionResponse } from '@gnosis.pm/safe-service-client'\nimport { toChecksumAddress } from '@rsksmart/rsk-utils'\nimport { getContracts } from '../config'\nimport { TransactionStatus } from '../constants'\nimport { TransactionBundle } from '../pages/safeInteraction'\n\n// the transaction service requires the Ethereum checksum\nconst toEthereumChecksum = (address: string) => toChecksumAddress(address)\n\n// create the safe service client:\nconst getSafeService = (safe: Safe) =>\n  safe.getChainId().then((chainId: number) =>\n    new SafeServiceClient(getContracts(chainId).safeTransactionService))\n\n// Convert the response from the transaction service to our Sample Apps \"TransactionByndle\"\nconst convertToBundle = (transactionResponse: SafeMultisigTransactionResponse, safeNonce: number) => {\n  const transaction = new SafeTransaction({\n    to: transactionResponse.to,\n    value: transactionResponse.value,\n    data: transactionResponse.data || '0x',\n    safeTxGas: transactionResponse.safeTxGas,\n    baseGas: transactionResponse.baseGas,\n    gasPrice: parseInt(transactionResponse.gasPrice),\n    nonce: transactionResponse.nonce,\n    operation: transactionResponse.operation,\n    gasToken: transactionResponse.gasToken,\n    refundReceiver: transactionResponse.refundReceiver || ''\n  })\n\n  const isReject = (\n    transactionResponse.to.toLowerCase() === transactionResponse.safe.toLowerCase() &&\n    transactionResponse.value === '0' &&\n    !transactionResponse.data)\n\n  // Transaction Status\n  let status = TransactionStatus.PENDING\n  if (transactionResponse.isExecuted) {\n    status = TransactionStatus.EXECUTED\n  } else if (transactionResponse.nonce < safeNonce) {\n    status = TransactionStatus.REJECTED\n  }\n\n  const response: TransactionBundle = {\n    transaction,\n    hash: transactionResponse.safeTxHash,\n    status,\n    isReject,\n    isPublished: true\n  }\n\n  return response\n}\n\nexport const getTransactions = (safe: Safe, safeNonce: number) =>\n  getSafeService(safe).then((safeService: SafeServiceClient) =>\n    safeService.getMultisigTransactions(toEthereumChecksum(safe.getAddress()))\n      .then((value: SafeMultisigTransactionListResponse) => {\n        if (value.results.length === 0) return []\n\n        // convert the response into a bundles\n        const bundleArray = value.results.map((transaction: SafeMultisigTransactionResponse) =>\n          convertToBundle(transaction, safeNonce))\n\n        // sort by nonce\n        return bundleArray.sort((a: TransactionBundle, b: TransactionBundle) =>\n          (a.transaction.data.nonce > b.transaction.data.nonce) ? 1 : -1)\n      }))\n\nexport const publishPendingTransaction = (\n  bundle: TransactionBundle,\n  safe: Safe\n) => new Promise((resolve, reject) =>\n  // get the signer to get the signature later\n  safe.getSigner()?.getAddress().then((signerAddress: string) => {\n    // get the signature on the transaction\n    const signature = bundle.transaction.signatures.get(signerAddress.toLowerCase())\n\n    if (!signature) { reject(new Error('Current account is not a signer on the transaction. Sign the transaction off-chain to publish to the transaction service.')) }\n\n    signature && getSafeService(safe).then((safeService: SafeServiceClient) =>\n      safeService.proposeTransaction(\n        toEthereumChecksum(safe.getAddress()),\n        {\n          ...bundle.transaction.data,\n          to: toEthereumChecksum(bundle.transaction.data.to)\n        },\n        bundle.hash,\n        signature\n      )\n        .then((value: any) =>\n          value === '' ? resolve(true) : reject(new Error(JSON.stringify(value))))\n        .catch((err: Error) => reject(err))\n    )\n  })\n)\n","import { Provider, TransactionReceipt } from '@ethersproject/providers'\n\nexport const transactionListener = (web3Provider: Provider, tx: string) =>\n  new Promise((resolve, reject) => {\n    const checkInterval = setInterval(() =>\n      web3Provider.getTransactionReceipt(tx)\n        .then((response: TransactionReceipt) => {\n          if (response) {\n            clearInterval(checkInterval)\n            response.status && response.status === 1 ? resolve(response) : reject(new Error('Transaction Failed'))\n          }\n        })\n        .catch((err: Error) => reject(err))\n    , 2000)\n  })\n","export default __webpack_public_path__ + \"static/media/loading.06d7c63f.svg\";","import React from 'react'\n\ninterface Interface {\n  address?: string\n  tx?: string\n}\n\nconst ViewExplorerButton: React.FC<Interface> = ({ address, tx }) => {\n  const url = address ? `address/${address.toLowerCase()}` : `tx/${tx}`\n  return (\n    <a\n      href={`http://explorer.testnet.rsk.co/${url}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"icon explorerLink\"\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\"><path d=\"M0 0H16V16H0z\"></path><path className=\"icon-color\" fillRule=\"nonzero\" d=\"M13 13v-2c0-.552.448-1 1-1s1 .448 1 1v2c0 1.105-.895 2-2 2H3c-1.105 0-2-.895-2-2V3c0-1.105.895-2 2-2h2c.552 0 1 .448 1 1s-.448 1-1 1H3v10h10z\"></path><path className=\"icon-color\" d=\"M11.586 3H9c-.552 0-1-.448-1-1s.448-1 1-1h5c.276 0 .526.112.707.293.181.18.293.43.293.707v5c0 .552-.448 1-1 1s-1-.448-1-1V4.414l-6.243 6.243c-.39.39-1.023.39-1.414 0-.39-.39-.39-1.024 0-1.414L11.586 3z\"></path></g></svg>\n    </a>\n  )\n}\n\nexport default ViewExplorerButton\n","import React from 'react'\nimport loadingImage from '../images/loading.svg'\nimport ViewExplorerButton from './ViewExplorerButton'\n\ninterface Interface {\n  text?: string\n  hash?: string\n}\n\nconst LoadingComponent: React.FC<Interface> = ({ text, hash }) => {\n  return (\n    <div className=\"loading\">\n      <p><img src={loadingImage} alt=\"Loading...\" /></p>\n      {(text || hash) && (\n        <p>\n          {text}\n          {hash && <> View it on the explorer <ViewExplorerButton tx={hash} /></>}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default LoadingComponent\n","import React from 'react'\nimport LoadingComponent from '../../../components/LoadingComponent'\nimport Modal from '../../../components/Modal'\nimport ViewExplorerButton from '../../../components/ViewExplorerButton'\n\ninterface Interface {\n  handleClose: () => void\n  hash: string\n}\n\nconst ApprovedModal: React.FC<Interface> = ({ hash, handleClose }) => {\n  if (hash === 'LOADING') {\n    return (\n      <Modal>\n        <LoadingComponent text=\"Adding the signature to the transaction.\" />\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal handleClose={handleClose}>\n      <h2>Transaction Approved</h2>\n      <p>Your signature has been added to this transaction! This is the hash of the transaction:</p>\n      <p>\n        <span className=\"readonly\">{hash}</span>\n        <ViewExplorerButton tx={hash} />\n      </p>\n      <p><button onClick={handleClose}>Close modal</button></p>\n    </Modal>\n  )\n}\n\nexport default ApprovedModal\n","import React from 'react'\nimport LoadingComponent from '../../../components/LoadingComponent'\nimport Modal from '../../../components/Modal'\nimport ViewExplorerButton from '../../../components/ViewExplorerButton'\n\ninterface Interface {\n  handleClose: () => void\n  status: { hash?: string, status?: string }\n}\n\nconst ExecutedModal: React.FC<Interface> = ({ handleClose, status }) => {\n  if (status.status === 'LOADING') {\n    return (\n      <Modal>\n        <LoadingComponent text=\"Executing the transaction.\" hash={status.hash} />\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal handleClose={handleClose}>\n      <h2>Transaction executed</h2>\n      <p>This is the hash of the transaction:</p>\n      <p>\n        <span className=\"readonly\">{status.hash}</span>\n        <ViewExplorerButton tx={status.hash} />\n      </p>\n      <p><button onClick={handleClose}>Close modal</button></p>\n    </Modal>\n  )\n}\n\nexport default ExecutedModal\n","import React from 'react'\nimport Modal from '../../../components/Modal'\n\ninterface Interface {\n  handleClose: () => void\n}\n\nconst PublishedModal: React.FC<Interface> = ({ handleClose }) => {\n  return (\n    <Modal handleClose={handleClose}>\n      <h2>Transaction Published</h2>\n      <p>The transaction has been published to the service for others to see.</p>\n    </Modal>\n  )\n}\n\nexport default PublishedModal\n","import React, { useRef } from 'react'\n\ninterface CopyButtonInterface {\n  value: string\n}\n\nconst CopyButton: React.FC<CopyButtonInterface> = ({ value }) => {\n  const copyTextField = useRef<HTMLInputElement>(null)\n\n  const handleClick = () => {\n    copyTextField.current && copyTextField.current.select()\n    document.execCommand('copy')\n  }\n\n  return (\n    <span className=\"copyButton\">\n      <button type=\"button\" className=\"icon\" onClick={handleClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\"><path d=\"M0 0H16V16H0z\"></path><path className=\"icon-color\" fillRule=\"nonzero\" d=\"M10 10h3V3H8v1c1.105 0 2 .895 2 2v4zM6 4V3c0-1.105.895-2 2-2h5c1.105 0 2 .895 2 2v7c0 1.105-.895 2-2 2h-3v1c0 1.105-.895 2-2 2H3c-1.105 0-2-.895-2-2V6c0-1.105.895-2 2-2h3zM3 6v7h5V6H3z\"></path></g></svg>\n      </button>\n\n      <input\n        type=\"text\"\n        className=\"copyText\"\n        defaultValue={value}\n        ref={copyTextField}\n        style={{ position: 'absolute', left: '-10000px' }}\n      />\n    </span>\n  )\n}\n\nexport default CopyButton\n","import React from 'react'\nimport CopyValueButton from './CopyValueButton'\nimport ViewExplorerButton from './ViewExplorerButton'\n\ninterface Interface {\n  value: string\n}\n\nconst ValueWithButtons: React.FC<Interface> = ({ value }) => {\n  return (\n    <>\n      {value}\n      <CopyValueButton value={value} />\n      <ViewExplorerButton address={value} />\n    </>\n  )\n}\n\nexport default ValueWithButtons\n","export default __webpack_public_path__ + \"static/media/refresh.7a8b3bf4.svg\";","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport React, { useEffect, useState } from 'react'\nimport ValueWithButtons from '../../../components/ValueWithButtons'\nimport refreshIcon from '../../../images/refresh.svg'\n\nimport safeAbi from '@gnosis.pm/safe-core-sdk/dist/src/abis/SafeAbiV1-2-0.json'\nimport erc20Abi from '../assets/erc20.json'\nimport InputDataDecoder from 'ethereum-input-data-decoder'\nimport { TransactionBundle } from '..'\nimport CopyValueButton from '../../../components/CopyValueButton'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  safe: Safe\n  transactionBundle: TransactionBundle\n  walletAddress: string\n  approveTransaction?: (transaction: TransactionBundle, onChain: boolean) => Promise<any>\n  executeTransaction?: (transactionBundle: TransactionBundle) => void\n  rejectTransaction?: (transaction: SafeTransaction) => void\n  publishTransaction?: (transaction: TransactionBundle) => void\n  handleError?: (error: Error) => void\n}\n\ninterface SignatureType {\n  signature: string,\n  isOnChain: boolean\n}\n\nconst TransactionDetailComponent: React.FC<Interface> = ({\n  safe, transactionBundle, walletAddress, handleError, approveTransaction, executeTransaction, rejectTransaction, publishTransaction\n}) => {\n  const { transaction, hash } = transactionBundle\n\n  const [showDetails, setShowDetails] = useState<boolean>(false)\n  const [signatures, setSignatures] = useState<SignatureType[]>([])\n  const [threshold, setThreshold] = useState<number>(0)\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false)\n  const [formatted, setFormatted] = useState<any>(null)\n\n  useEffect(() => {\n    // get transaction approvals\n    getApprovals()\n\n    // try to decode the data\n    const formatted = new InputDataDecoder(safeAbi).decodeData(transaction.data.data)\n    if (formatted.method) {\n      setFormatted(formatted)\n    } else {\n      setFormatted(new InputDataDecoder(erc20Abi).decodeData(transaction.data.data))\n    }\n\n    safe.getThreshold().then((safeThreshold: number) => setThreshold(safeThreshold))\n  }, [transaction])\n\n  const getApprovals = () => {\n    setIsRefreshing(true)\n\n    const offChain = Array.from(transaction.signatures.keys()).map((signature: string) => ({ signature, isOnChain: false }))\n\n    safe.getOwnersWhoApprovedTx(hash)\n      .then((signers: string[]) => {\n        const onChainSigners = signers.map((signature: string) => ({ signature, isOnChain: true }))\n        setSignatures([...offChain, ...onChainSigners])\n      })\n      .catch(handleError)\n      .finally(() => setIsRefreshing(false))\n  }\n\n  const getTransactionName = () => {\n    if (transactionBundle.isReject) {\n      return 'Rejection Transaction'\n    } else if (transaction.data.data === '0x') {\n      return 'Send Value'\n    } else if (formatted.method) {\n      return formatted.method\n    } else {\n      return 'Transaction'\n    }\n  }\n\n  const handleApprove = (onChain: boolean) =>\n    approveTransaction && approveTransaction(transactionBundle, onChain)\n      .then(() => getApprovals())\n\n  const handleReject = () =>\n    rejectTransaction && rejectTransaction(transaction)\n\n  const walletHasSigned = signatures.filter((value: SignatureType) => value.signature.toLowerCase() === walletAddress.toLowerCase()).length === 1\n  const canExecute = threshold > signatures.length\n\n  return (\n    <div className=\"transaction\">\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={2}>{formatted && getTransactionName()}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>to:</th>\n            <td>\n              {transaction.data.to === safe.getAddress() && <em>(Safe) </em>}\n              <ValueWithButtons value={transaction.data.to} />\n            </td>\n          </tr>\n          {transactionBundle.status === TransactionStatus.PENDING && (\n            <tr>\n              <th>approvals:</th>\n              <td>\n                {isRefreshing ? 'loading...' : `${signatures.length} out of ${threshold}`}\n                <button className=\"icon\" onClick={getApprovals}>\n                  <img src={refreshIcon} alt=\"refresh\" />\n                </button>\n              </td>\n            </tr>\n          )}\n          {transaction.data.value !== '0' && (\n            <tr>\n              <th>value:</th>\n              <td><p>{transaction.data.value}</p></td>\n            </tr>\n          )}\n          <tr>\n            <th>nonce:</th>\n            <td><p>{transaction.data.nonce}</p></td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"buttons\">\n        <button onClick={() => setShowDetails(!showDetails)}>{showDetails ? 'hide ' : 'show '}details</button>\n        {approveTransaction && (\n          <>\n            <button\n              disabled={walletHasSigned}\n              onClick={() => handleApprove(true)}>approve on-chain</button>\n            <button\n              disabled={walletHasSigned}\n              onClick={() => handleApprove(false)}>approve off-chain</button>\n            <button\n              disabled={transactionBundle.isPublished}\n              onClick={() => publishTransaction && publishTransaction(transactionBundle)}>Publish</button>\n          </>\n        )}\n        {!transactionBundle.isReject && rejectTransaction && <button\n          onClick={handleReject}\n        >create rejection</button>}\n        {executeTransaction && <button\n          disabled={canExecute}\n          onClick={() => executeTransaction(transactionBundle)}>execute</button>}\n      </div>\n\n      {showDetails && (\n        <table><tbody>\n          <tr>\n            <th>Transaction Hash</th>\n            <td>\n              <p>{hash}<CopyValueButton value={hash} /></p>\n            </td>\n          </tr>\n          {transaction.data.data !== '0x' && (\n            <>\n              <tr>\n                <th>Raw Data</th>\n                <td><p className=\"data\">{transaction.data.data}</p></td>\n              </tr>\n              <tr>\n                <th>Decoded Data</th>\n                <td>\n                  <pre>{JSON.stringify(formatted, null, 2)}</pre>\n                </td>\n              </tr>\n            </>\n          )}\n          <tr>\n            <th>Approvals:</th>\n            <td>\n              {signatures.length === 0 ? <p><em>No signatures</em></p> : (\n                <>\n                  <ol >\n                    {signatures.map((approval: SignatureType) =>\n                      <li key={approval.signature}>\n                        <ValueWithButtons value={approval.signature} />\n                        {`(${approval.isOnChain ? 'on' : 'off'}-chain)`}\n                        {walletAddress.toLowerCase() === approval.signature.toLowerCase() && <em>(Connected Account)</em>}\n                      </li>)}\n                  </ol>\n                </>\n              )}\n            </td>\n          </tr>\n        </tbody></table>\n      )}\n    </div>\n  )\n}\n\nexport default TransactionDetailComponent\n","import React from 'react'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  selected: TransactionStatus,\n  handleClick: (tab: TransactionStatus) => void\n}\n\nconst TransactionMenu: React.FC<Interface> = ({ handleClick, selected }) => {\n  const MenuItem: React.FC<{name: TransactionStatus}> = ({ name }) =>\n    <li>\n      <button\n        onClick={() => handleClick(name)}\n        className={selected === name ? 'selected' : ''}\n      >{name}</button></li>\n\n  return (\n    <ul className=\"inline\">\n      <MenuItem name={TransactionStatus.PENDING} />\n      <MenuItem name={TransactionStatus.EXECUTED} />\n      <MenuItem name={TransactionStatus.REJECTED} />\n    </ul>\n  )\n}\n\nexport default TransactionMenu\n","import React from 'react'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  screen: TransactionStatus\n  count: number\n}\n\nconst TransactionTabHelperText: React.FC<Interface> = ({ count, screen }) => {\n  if (count === 0) {\n    return (\n      <p><em>No {screen.toString()} transactions</em></p>\n    )\n  }\n\n  switch (screen) {\n    case TransactionStatus.PENDING:\n      return (\n        <p>Transactions must be executed in nonce order. Please execute the first transaction before interacting with the next. If you do not want to execute the next transaction, create and execute a rejection transaction which will move to the next nonce.</p>\n      )\n    case TransactionStatus.REJECTED:\n      return (\n        <p>These transactions have a corresponding &quot;Executed&quot; transaction with the same nonce.</p>\n      )\n  }\n\n  return (<></>)\n}\n\nexport default TransactionTabHelperText\n","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport { rejectTx, executeTransaction } from '@rsksmart/safe-transactions-sdk'\nimport { ContractTransaction } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport { TransactionBundle } from '..'\nimport Modal from '../../../components/Modal'\nimport { TransactionStatus } from '../../../constants'\nimport { publishPendingTransaction } from '../../../helpers/safeServiceClient'\nimport { transactionListener } from '../../../helpers/transactionListener'\nimport ApprovedModal from './ApprovedModal'\nimport ExecutedModal from './ExecutedModal'\nimport PublishedModal from './PublishedModal'\nimport TransactionDetailComponent from './TransactionDetailComponent'\nimport TransactionMenu from './TransactionMenu'\nimport TransactionTabHelperText from './TransactionTabHelperText'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error) => void\n  addTransaction: (transaction: SafeTransaction, isReject: boolean) => void\n  updateTransactionBundle: (transaction: TransactionBundle) => void\n  transactions: TransactionBundle[]\n  walletAddress: string\n}\n\nconst TransactionsPanel: React.FC<Interface> = ({ safe, handleError, updateTransactionBundle, addTransaction, walletAddress, transactions }) => {\n  const [showApprovedModal, setShowApprovedModal] = useState<string | null>(null)\n  const [approvedOffChainModal, setApprovedOffChainModal] = useState<boolean>(false)\n  const [showExecutedModal, setShowExecutedModal] = useState<{ status: string, hash?: string } | null>(null)\n  const [showPublishedModal, setShowPublishedModal] = useState<boolean>(false)\n\n  const [currentSubTab, setCurrentSubTab] = useState<TransactionStatus>(TransactionStatus.PENDING)\n  const [currentTransactions, setCurrentTransactions] = useState<TransactionBundle[]>([])\n\n  const [safeNonce, setSafeNonce] = useState<number>(0)\n\n  const changeCurrentTab = (name: TransactionStatus) => {\n    setCurrentSubTab(name)\n    setCurrentTransactions(transactions.filter((tran: TransactionBundle) => tran.status === name))\n  }\n\n  useEffect(() => {\n    changeCurrentTab(TransactionStatus.PENDING)\n    safe.getNonce().then((nonce: number) => setSafeNonce(nonce))\n  }, [transactions])\n\n  const createRejectionTransaction = (transaction: SafeTransaction) =>\n    rejectTx(safe, transaction)\n      .then((transaction: SafeTransaction) => addTransaction(transaction, true))\n\n  // Approve/Sign a transaction\n  const approveTransaction = (transaction: TransactionBundle, onChain: boolean) =>\n    onChain ? approveTransactionHash(transaction) : approveTransactionOffChain(transaction)\n\n  // Sign transaction \"on-chain\"\n  const approveTransactionHash = (bundle: TransactionBundle) => {\n    setShowApprovedModal('LOADING')\n\n    return safe.getTransactionHash(bundle.transaction)\n      .then((hash: string) =>\n        safe.approveTransactionHash(hash)\n          .then((result: ContractTransaction) => transactionListener(safe.getProvider(), result.hash))\n          .then((receipt: any) => setShowApprovedModal(receipt.transactionHash)))\n      .catch((err: Error) => {\n        setShowApprovedModal(null)\n        handleError(err)\n      })\n  }\n\n  const approveTransactionOffChain = (bundle: TransactionBundle) =>\n    safe.signTransaction(bundle.transaction)\n      .then(() => {\n        updateTransactionBundle(bundle)\n        setApprovedOffChainModal(true)\n      })\n      .catch(handleError)\n\n  // Execute transaction\n  const handleExecutionTransaction = (bundle: TransactionBundle) => {\n    executeTransaction(safe, bundle.transaction)\n      .then((result: ContractTransaction) => {\n        setShowExecutedModal({ status: 'LOADING', hash: result.hash })\n        return transactionListener(safe.getProvider(), result.hash)\n      })\n      .then((receipt: any) => {\n        setShowExecutedModal({ status: 'COMPLETE', hash: receipt.transactionHash })\n        updateTransactionBundle({ ...bundle, status: TransactionStatus.EXECUTED })\n      })\n      .catch((err: Error) => {\n        setShowExecutedModal(null)\n        handleError(err)\n      })\n  }\n\n  // publish a transaction to the transaction service:\n  const publishTransaction = (bundle: TransactionBundle) =>\n    publishPendingTransaction(bundle, safe)\n      .then(() => {\n        setShowPublishedModal(true)\n        updateTransactionBundle({ ...bundle, isPublished: true })\n      })\n      .catch(handleError)\n\n  return (\n    <>\n      <section className=\"panel\">\n        <h2>Transactions</h2>\n\n        <TransactionMenu\n          selected={currentSubTab}\n          handleClick={changeCurrentTab}\n        />\n\n        <h3>{`${currentSubTab.toString()} Transactions:`}</h3>\n\n        <TransactionTabHelperText count={currentTransactions.length} screen={currentSubTab} />\n\n        {currentTransactions.map((transaction: TransactionBundle) => {\n          const currentNonce = safeNonce === transaction.transaction.data.nonce\n          const isPending = currentSubTab === TransactionStatus.PENDING\n          const hasDuplicate = currentTransactions.filter((t: TransactionBundle) => t.transaction.data.nonce === transaction.transaction.data.nonce).length > 1\n\n          return <TransactionDetailComponent\n            key={transaction.hash}\n            safe={safe}\n            transactionBundle={transaction}\n            walletAddress={walletAddress}\n            handleError={handleError}\n            approveTransaction={currentSubTab === TransactionStatus.PENDING ? approveTransaction : undefined}\n            executeTransaction={(isPending && currentNonce) ? handleExecutionTransaction : undefined}\n            rejectTransaction={(isPending && currentNonce && !hasDuplicate) ? createRejectionTransaction : undefined}\n            publishTransaction={publishTransaction}\n          />\n        })}\n      </section>\n\n      {showApprovedModal && <ApprovedModal hash={showApprovedModal} handleClose={() => setShowApprovedModal(null)} />}\n      {showExecutedModal && <ExecutedModal status={showExecutedModal} handleClose={() => setShowExecutedModal(null)} />}\n      {showPublishedModal && <PublishedModal handleClose={() => setShowPublishedModal(false)} />}\n      {approvedOffChainModal && <Modal handleClose={() => setApprovedOffChainModal(false)}>\n        <h2>Signature Added</h2>\n        <p>Since this is a sample app, this signature will be saved in local state only. It will not be saved if the app refreshed.</p>\n      </Modal>}\n    </>\n  )\n}\n\nexport default TransactionsPanel\n","import { Safe } from '@gnosis.pm/safe-core-sdk'\nimport React, { useEffect, useState } from 'react'\nimport ValueWithButtons from '../../components/ValueWithButtons'\nimport refreshIcon from '../../images/refresh.svg'\n\ninterface Interface {\n  safe: Safe\n}\n\nconst Dashboard: React.FC<Interface> = ({ safe }) => {\n  const [balance, setBalance] = useState<number>(0)\n  const [nonce, setNonce] = useState<number | null>(null)\n\n  useEffect(() => {\n    getBalance()\n    getNonce()\n  }, [safe])\n\n  const getBalance = () => safe.getBalance().then((balance: any) => setBalance(balance))\n  const getNonce = () => safe.getNonce().then((nonce: number) => setNonce(nonce))\n\n  return (\n    <section className=\"panel\">\n      <h2>Safe Dashboard</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Safe Address</th>\n            <td><ValueWithButtons value={safe.getAddress()} /></td>\n          </tr>\n          <tr className=\"text\">\n            <th>Balance</th>\n            <td>\n              {(balance / 1000000000000000000).toString()}\n              <button onClick={getBalance} className=\"icon\"><img src={refreshIcon} alt=\"Refresh\" /></button>\n            </td>\n          </tr>\n          {nonce !== null && (\n            <tr className=\"text\">\n              <th>Nonce</th>\n              <td>\n                {nonce.toString()}\n                <button onClick={getNonce} className=\"icon\"><img src={refreshIcon} alt=\"Refresh\" /></button>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </section>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\n\ninterface Interface {\n  value: number\n  onChange: (value: number) => void\n  numberOfOwners: number\n}\n\nconst ThresholdDropdown: React.FC<Interface> = ({ value, onChange, numberOfOwners }) => {\n  const options = []\n  for (let index = 1; index <= numberOfOwners; index++) {\n    options.push(index)\n  }\n\n  const handleChange = (evt: any) => onChange(parseInt(evt.target.value))\n\n  return (\n    <select value={value} onChange={handleChange}>\n      {options.map((number: number) => <option key={number} value={number}>{number}</option>)}\n    </select>\n  )\n}\n\nexport default ThresholdDropdown\n","import React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  currentThreshold: number\n  handleSubmit: (newThreshold: number) => void\n}\n\nconst ChangeThresholdModal: React.FC<Interface> = ({ numberOfOwners, currentThreshold, handleSubmit }) => {\n  const [newThreshold, setNewThreshold] = useState<number>(currentThreshold)\n\n  const options = []\n  for (let index = 1; index <= numberOfOwners; index++) {\n    options.push(index)\n  }\n\n  return (\n    <div>\n      <h3>Change threshold</h3>\n      <p>Change the number of approvers for a transaction to be executed</p>\n      <label>New threshold:</label>\n      <ThresholdDropdown\n        numberOfOwners={numberOfOwners}\n        value={newThreshold}\n        onChange={(value: number) => setNewThreshold(value)}\n      />\n\n      <p><button onClick={() => handleSubmit(newThreshold)}>Change threshold</button></p>\n    </div>\n  )\n}\n\nexport default ChangeThresholdModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  handleSubmit: (newOwner: string, newThreshold: number) => void\n  handleError: (err: Error) => void\n}\n\nconst AddOwnerModal: React.FC<Interface> = ({ handleSubmit, handleError, numberOfOwners }) => {\n  const [newOwner, setNewOwner] = useState<string>('')\n  const [newThreshold, setNewThreshold] = useState<number>(numberOfOwners)\n\n  const validateAddress = () => {\n    isAddress(newOwner.toLowerCase())\n      ? handleSubmit(newOwner.toLowerCase(), newThreshold)\n      : handleError(new Error('Value is not an address.'))\n  }\n\n  return (\n    <div>\n      <h3>Add new owner</h3>\n      <label>\n        Address</label>\n      <input type=\"text\" className=\"newOwner\" value={newOwner} onChange={evt => setNewOwner(evt.target.value)} />\n\n      <label>New Threshold</label>\n      <ThresholdDropdown\n        numberOfOwners={numberOfOwners}\n        value={newThreshold}\n        onChange={(value: number) => setNewThreshold(value)}\n      />\n\n      <p><button onClick={validateAddress}>Update</button></p>\n    </div>\n  )\n}\n\nexport default AddOwnerModal\n","import React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  handleSubmit: (address: string, threshold: number) => void\n  removeAddress: string\n}\n\nconst RemoveOwnerModal: React.FC<Interface> = ({ numberOfOwners, handleSubmit, removeAddress }) => {\n  const [threshold, setThreshold] = useState<number>(numberOfOwners - 1)\n\n  return (\n    <div>\n      <h3>Remove owner</h3>\n      <p>Are you sure you want to remove this owner?</p>\n      <span className=\"readonly\">{removeAddress}</span>\n\n      <p>\n        <label>New threshold:</label>\n        <ThresholdDropdown\n          numberOfOwners={numberOfOwners - 1}\n          value={threshold}\n          onChange={(value: number) => setThreshold(value)} />\n      </p>\n\n      <p><button onClick={() => handleSubmit(removeAddress.toLowerCase(), threshold)}>Remove</button></p>\n    </div>\n  )\n}\n\nexport default RemoveOwnerModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\n\ninterface Interface {\n  handleError: (err: Error) => void\n  handleSubmit: (oldOwner: string, newOwner: string) => void\n  oldAddress: string\n}\n\nconst SwapOwnerModal: React.FC<Interface> = ({ oldAddress, handleError, handleSubmit }) => {\n  const [newOwner, setNewOwner] = useState<string>('')\n\n  const validateAddress = () =>\n    isAddress(newOwner)\n      ? handleSubmit(oldAddress, newOwner.toLowerCase())\n      : handleError(new Error('Address is not valid'))\n\n  return (\n    <div>\n      <h3>Swap Owner</h3>\n      <p>Swap address for a new one.</p>\n      <label>Old Address:</label>\n      <span className=\"readonly\">{oldAddress}</span>\n      <label>New Owner</label>\n      <input type=\"text\" className=\"newAddress\" value={newOwner} onChange={evt => setNewOwner(evt.target.value)} />\n\n      <p><button onClick={validateAddress}>Swap Address</button></p>\n    </div>\n  )\n}\n\nexport default SwapOwnerModal\n","export default __webpack_public_path__ + \"static/media/delete.8970c03e.svg\";","export default __webpack_public_path__ + \"static/media/swap.29d1f400.svg\";","export default __webpack_public_path__ + \"static/media/edit.d3af4af9.svg\";","import React, { useEffect, useState } from 'react'\nimport { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport ValueWithButtons from '../../../components/ValueWithButtons'\nimport ChangeThresholdModal from './ChangeThresholdModal'\nimport AddOwnerModal from './AddOwnerModal'\nimport RemoveOwnerModal from './RemoveOwnerModal'\nimport SwapOwnerModal from './SwapOwnerModal'\nimport Modal from '../../../components/Modal'\nimport deleteIcon from '../../../images/delete.svg'\nimport swapIcon from '../../../images/swap.svg'\nimport editIcon from '../../../images/edit.svg'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error) => void\n  addTransaction: (transaction: SafeTransaction) => void\n}\n\nconst PolicyComponent: React.FC<Interface> = ({ safe, addTransaction, handleError }) => {\n  // Safe variables:\n  const [owners, setOwners] = useState<string[]>([])\n  const [threshold, setThreshold] = useState<number>(0)\n\n  // UI components:\n  const [addNewOwner, setAddNewOwner] = useState<boolean>(false)\n  const [changeThreshold, setChangeThreshold] = useState<boolean>(false)\n  const [removeOwner, setRemoveOwner] = useState<null | string>(null)\n  const [swapOwner, setSwapOwner] = useState<null | string>(null)\n\n  useEffect(() => {\n    safe.getOwners().then((owners: string[]) => setOwners(owners))\n    safe.getThreshold().then((result: number) => setThreshold(result))\n  }, [safe])\n\n  // Create transaction for changing the thresold:\n  const changeThresholdFunction = (newThreshold: number) =>\n    safe.getChangeThresholdTx(newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // Add an owner and update threshold:\n  const addOwnerFunction = (newOwner: string, newThreshold: number) =>\n    safe.getAddOwnerTx(newOwner, newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // remove an owner and update the threshold:\n  const removeOwnerFunction = (removeOwner: string, newThreshold: number) =>\n    safe.getRemoveOwnerTx(removeOwner, newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // swap one owner for another:\n  const swapOwnerFunction = (swapOwner: string, newOwner: string) =>\n    safe.getSwapOwnerTx(swapOwner, newOwner)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // close ALL modals\n  const afterTransaction = () => {\n    setAddNewOwner(false)\n    setChangeThreshold(false)\n    setRemoveOwner(null)\n    setSwapOwner(null)\n  }\n\n  return (\n    <section className=\"section panel\">\n      <h2>Safe Policy</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Owners</th>\n            <td>\n              <ul>\n                {owners.map((owner: string) => (\n                  <li key={owner} >\n                    <ValueWithButtons value={owner} />\n                    <button className=\"icon delete\" onClick={() => setRemoveOwner(owner)}>\n                      <img src={deleteIcon} alt=\"delete address\" />\n                    </button>\n                    <button className=\"icon\" onClick={() => setSwapOwner(owner)}>\n                      <img src={swapIcon} alt=\"swap address\" />\n                    </button>\n                  </li>\n                ))}\n              </ul>\n              <button onClick={() => setAddNewOwner(true)}>+ Add Owner</button>\n            </td>\n          </tr>\n          <tr className=\"text\">\n            <th>Threshold</th>\n            <td>\n              {threshold}\n              <button className=\"icon\" onClick={() => setChangeThreshold(true)}>\n                <img src={editIcon} alt=\"edit threshold\" />\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      {changeThreshold && <Modal handleClose={() => setChangeThreshold(false)}><ChangeThresholdModal numberOfOwners={owners.length} currentThreshold={threshold} handleSubmit={changeThresholdFunction} /></Modal>}\n      {addNewOwner && <Modal handleClose={() => setAddNewOwner(false)}><AddOwnerModal numberOfOwners={owners.length} handleSubmit={addOwnerFunction} handleError={handleError} /></Modal>}\n      {removeOwner && <Modal handleClose={() => setRemoveOwner(null)}><RemoveOwnerModal removeAddress={removeOwner} numberOfOwners={owners.length} handleSubmit={removeOwnerFunction} /></Modal>}\n      {swapOwner && <Modal handleClose={() => setSwapOwner(null)}><SwapOwnerModal oldAddress={swapOwner} handleSubmit={swapOwnerFunction} handleError={handleError} /></Modal>}\n    </section>\n  )\n}\n\nexport default PolicyComponent\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\n\ninterface Interface {\n  createTransaction: (recipient: string, amount: number, data: string) => void\n  handleError: (error: Error | null) => void\n}\n\nconst TransferValueModal: React.FC<Interface> = ({ createTransaction, handleError }) => {\n  const [transaction, setTransaction] = useState<{amount: number, address: string, data: string}>({ amount: 10000, address: '', data: '' })\n\n  const validateTransaction = () => {\n    handleError(null)\n\n    if (!isAddress(transaction.address)) {\n      return handleError(new Error('Recipient is not an address.'))\n    }\n\n    const formattedData = transaction.data === '' ? '0x' : transaction.data\n    createTransaction(\n      transaction.address.toLowerCase(),\n      transaction.amount,\n      formattedData\n    )\n  }\n\n  return (\n    <>\n      <h3>Create Transaction</h3>\n      <p>\n        <label>Recepient address:</label>\n        <input type=\"text\" className=\"to\" value={transaction.address} onChange={evt => setTransaction({ ...transaction, address: evt.target.value })} />\n      </p>\n      <p>\n        <label>Amount:</label>\n        <input type=\"number\" className=\"amount\" value={transaction.amount} onChange={evt => setTransaction({ ...transaction, amount: parseInt(evt.target.value) })} />\n      </p>\n      <p>\n        <label>\n          Data: (optional field used for advanced transactions)\n        </label>\n        <textarea className=\"data\" value={transaction.data} onChange={evt => setTransaction({ ...transaction, data: evt.target.value })} />\n      </p>\n      <button className=\"submit\" onClick={validateTransaction}>Create Transaction</button>\n    </>\n  )\n}\n\nexport default TransferValueModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\nimport { Erc20Token } from '.'\n\ninterface Interface {\n  token: Erc20Token\n  handleError: (err: Error | null) => void\n  createTransaction: (token: Erc20Token, amount: number, to: string) => void\n}\n\nconst TransferTokenModal: React.FC<Interface> = ({ token, createTransaction, handleError }) => {\n  const [transaction, setTransaction] = useState<{amount: number, address: string}>({ amount: 0, address: '' })\n\n  const validateTransaction = () => {\n    handleError(null)\n\n    if (!isAddress(transaction.address)) {\n      return handleError(new Error('Recipient is not an address.'))\n    }\n\n    if (transaction.amount > token.amount || transaction.amount < 1) {\n      return handleError(new Error(`Amount should be between 1 and ${token.amount}.`))\n    }\n\n    return createTransaction(token, transaction.amount, transaction.address.toLowerCase())\n  }\n\n  return (\n    <div>\n      <h2>Transfer ERC20 Token: {token.symbol}</h2>\n      <p>\n        <label>You have:</label>\n        <span className=\"readonly\">{token.amount}</span>\n      </p>\n      <p>\n        <label>Amount to sent:</label>\n        <input type=\"number\" className=\"amount\" value={transaction.amount} onChange={evt => setTransaction({ ...transaction, amount: parseInt(evt.target.value) })} />\n      </p>\n      <p>\n        <label>Recipient address:</label>\n        <input type=\"string\" className=\"recipient\" value={transaction.address} onChange={evt => setTransaction({ ...transaction, address: evt.target.value })} />\n      </p>\n      <p>\n        <button className=\"submit\" onClick={validateTransaction}>\n          Create Transaction\n        </button>\n      </p>\n    </div>\n  )\n}\n\nexport default TransferTokenModal\n","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport { ERC20TransactionBuilder } from '@rsksmart/safe-transactions-sdk'\nimport { BigNumber, Contract } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport Modal from '../../../components/Modal'\nimport TransferValueModal from './TransferValueModal'\nimport erc20Abi from './erc20.json'\nimport refreshIcon from '../../../images/refresh.svg'\nimport TransferTokenModal from './TransferTokenModal'\nimport { getContracts } from '../../../config'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error | null) => void\n  addTransaction: (transaction: SafeTransaction) => void\n}\n\nexport interface Erc20Token {\n  symbol: string\n  decimals: number\n  amount: number\n  contractAddress: string\n}\n\nconst AssetsComponent: React.FC<Interface> = ({ safe, addTransaction, handleError }) => {\n  const [showTransfer, setShowTransfer] = useState<boolean>(false)\n  const [showTokenTransfer, setShowTokenTransfer] = useState<Erc20Token | null>(null)\n\n  const [balance, setBalance] = useState<string>('0')\n  const [tokens, setTokens] = useState<any[]>([])\n\n  useEffect(() => {\n    getSafeBalance()\n\n    safe.getChainId().then((chainId: number) =>\n      getERC2Balance({ symbol: 'tRIF', decimals: 18, amount: 0, contractAddress: getContracts(chainId).rifToken }))\n  }, [safe])\n\n  const getSafeBalance = () => safe.getBalance().then((balance: BigNumber) => setBalance(balance.toString()))\n\n  const getERC2Balance = (token: Erc20Token) => {\n    const signer = safe.getSigner()\n    const contract = new Contract(token.contractAddress, erc20Abi, signer)\n    contract.balanceOf(safe.getAddress())\n      .then((result: BigNumber) => result.toString())\n      .then((result: string) => {\n        const updateToken = { ...token, amount: parseInt(result) / Math.pow(10, 18) }\n        const isListed = tokens.find((findToken: Erc20Token) => findToken.symbol === token.symbol)\n\n        const newTokenList = isListed\n          ? tokens.map((findToken: Erc20Token) => findToken.symbol === token.symbol ? updateToken : findToken)\n          : [...tokens, updateToken]\n\n        setTokens(newTokenList)\n      })\n      .catch((err: Error) => console.log('error', err))\n  }\n\n  // Create transaction to send rbtc or data\n  const createTransaction = (to: string, amount: number, data: string) => {\n    handleError(null)\n    safe.createTransaction({\n      to,\n      value: amount.toString(),\n      data\n    })\n      .then((transaction: SafeTransaction) => addTransaction(transaction))\n      .catch(handleError)\n      .finally(() => setShowTransfer(false))\n  }\n\n  // Create transaction to send an ERC20 token:\n  const createTokenTransaction = (token: Erc20Token, amount: number, to: string) => {\n    handleError(null)\n\n    ERC20TransactionBuilder.create(safe, token.contractAddress).then((txBuilder: ERC20TransactionBuilder) => {\n      const bigAmount = BigNumber.from(amount).mul(BigNumber.from(10).pow(token.decimals))\n\n      txBuilder.transfer(to, bigAmount)\n        .then((transaction: SafeTransaction) => addTransaction(transaction))\n        .catch(handleError)\n        .finally(() => setShowTokenTransfer(null))\n    })\n  }\n\n  return (\n    <>\n      <div className=\"panel\">\n        <h2>Assets</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Asset</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><p>rBTC</p></td>\n              <td>\n                <p>\n                  {(parseInt(balance) / 1000000000000000000).toString()}\n                  <button className=\"icon\" onClick={getSafeBalance}>\n                    <img src={refreshIcon} alt=\"refresh balance\" />\n                  </button>\n                  <button className=\"icon\" onClick={() => setShowTransfer(true)}>transfer</button>\n                </p>\n              </td>\n            </tr>\n            {tokens.map((token: any) => (\n              <tr key={token.contractAddress}>\n                <td><p>{token.symbol}</p></td>\n                <td>\n                  {token.amount}\n                  <button className=\"icon\" onClick={() => getERC2Balance(token)}>\n                    <img src={refreshIcon} alt=\"refresh balance\" />\n                  </button>\n                  <button className=\"icon\" onClick={() => setShowTokenTransfer(token)}>\n                    transfer\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {showTransfer && (\n        <Modal handleClose={() => setShowTransfer(false)}>\n          <TransferValueModal\n            createTransaction={createTransaction}\n            handleError={handleError}\n          />\n        </Modal>\n      )}\n      {showTokenTransfer && (\n        <Modal handleClose={() => setShowTokenTransfer(null)}>\n          <TransferTokenModal\n            token={showTokenTransfer}\n            handleError={handleError}\n            createTransaction={createTokenTransaction}\n          />\n        </Modal>\n      )}\n    </>\n  )\n}\n\nexport default AssetsComponent\n","import React from 'react'\nimport Modal from './Modal'\n\ninterface Interface {\n  closeModal: () => void\n  changeScreen: () => void\n}\n\nconst TransactionCreatedModal: React.FC<Interface> = ({ closeModal, changeScreen }) => {\n  return (\n    <Modal handleClose={closeModal}>\n      <h2>Transaction Created</h2>\n      <p>A transaction has been created and added to the transaction panel. You can sign the transaction there, and when enough signatures are collected, execute it.</p>\n      <p>\n        <button onClick={changeScreen}>View Transactions</button>\n      </p>\n    </Modal>\n  )\n}\n\nexport default TransactionCreatedModal\n","import React, { useState, useEffect } from 'react'\nimport { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport Navigation from './Navigation'\nimport TransactionsPanel from './transactions'\nimport Dashboard from './Dashboard'\nimport PolicyComponent from './policies'\nimport AssetsComponent from './assets'\nimport TransactionCreatedModal from '../../components/TransactionCreatedModal'\nimport { Screens, TransactionStatus } from '../../constants'\nimport { getTransactions } from '../../helpers/safeServiceClient'\n\ninterface Interface {\n  safe: Safe\n  walletAddress: string\n  handleLogout: () => void\n  handleError: (err: Error | null) => void\n}\n\n// Wrapper for transaction to keep track of the status, and hash to be used as an identifier\nexport interface TransactionBundle {\n  transaction: SafeTransaction\n  hash: string\n  status: TransactionStatus\n  isReject: boolean\n  isPublished: boolean\n}\n\nconst SafeInteraction: React.FC<Interface> = ({ safe, walletAddress, handleError, handleLogout }) => {\n  // UI Only\n  const [selectedTab, setSelectedTab] = useState<Screens>(Screens.DASHBOARD)\n  const [showTransactionInfo, setShowTransactionInfo] = useState<boolean>(false)\n  const changeActive = (screen: Screens) => setSelectedTab(screen)\n\n  // Keep track of the Apps transaction nonce, starting with the safe's nonce\n  const [appNonce, setAppNonce] = useState(0)\n\n  useEffect(() => {\n    safe.getNonce().then((nonce: number) => {\n      setAppNonce(nonce)\n\n      // get transactions from the service\n      getTransactions(safe, nonce)\n        .then((bundles: TransactionBundle[]) => {\n          setTransactions(bundles)\n          // update the app's nonce\n          bundles.length !== 0 &&\n            setAppNonce(bundles[bundles.length - 1].transaction.data.nonce + 1)\n        })\n        .catch(handleError)\n    })\n  }, [safe])\n\n  // Transaction Management, all transactions:\n  const [transactions, setTransactions] = useState<TransactionBundle[]>([])\n\n  // Add a new PENDING transaction to the list\n  const addTransaction = (incomingTransaction: SafeTransaction, isReject?: boolean) => {\n    // set the correct nonce if there are pending transactions:\n    const transaction = !isReject\n      ? new SafeTransaction({ ...incomingTransaction.data, nonce: appNonce })\n      : incomingTransaction\n\n    // get the hash to be used as an identifier\n    safe.getTransactionHash(transaction)\n      .then((hash: string) => {\n        // create new transaction list\n        const newTransactionList = [...transactions, { status: TransactionStatus.PENDING, transaction, hash, isReject: isReject || false, isPublished: false }]\n\n        // sort the order of transactions by nonce:\n        const nonceSorted = newTransactionList.sort((a: TransactionBundle, b: TransactionBundle) =>\n          (a.transaction.data.nonce > b.transaction.data.nonce) ? 1 : -1)\n\n        // set the sorted transactions\n        setTransactions(nonceSorted)\n        setShowTransactionInfo(true)\n\n        // increase the app's nonce by 1 if it isn't a reject transaction\n        !isReject && setAppNonce(appNonce + 1)\n      })\n  }\n\n  // update a transaction bundle\n  const updateTransactionBundle = (transactionBundle: TransactionBundle) => {\n    let list = transactions.map((bundle: TransactionBundle) =>\n      bundle.hash === transactionBundle.hash ? transactionBundle : bundle)\n\n    // if the status is EXECUTED, then also update other transactions with the same nonce to REJECTED:\n    if (transactionBundle.status === TransactionStatus.EXECUTED) {\n      list = list.map((bundle: TransactionBundle) =>\n        (bundle.transaction.data.nonce === transactionBundle.transaction.data.nonce &&\n          bundle.status === TransactionStatus.PENDING)\n          ? { ...bundle, status: TransactionStatus.REJECTED } : bundle\n      )\n    }\n\n    setTransactions(list)\n  }\n\n  const closeModalAndSwitchScreen = () => {\n    setShowTransactionInfo(false)\n    setSelectedTab(Screens.TRANSACTIONS)\n  }\n\n  return (\n    <section className=\"selectedSafe\">\n      <Navigation handleLogout={handleLogout} changeActive={changeActive} selected={selectedTab} />\n      {selectedTab === Screens.DASHBOARD && <Dashboard safe={safe} />}\n      {selectedTab === Screens.TRANSACTIONS && (\n        <TransactionsPanel\n          safe={safe}\n          transactions={transactions}\n          handleError={handleError}\n          addTransaction={addTransaction}\n          updateTransactionBundle={updateTransactionBundle}\n          walletAddress={walletAddress} />\n      )}\n      {selectedTab === Screens.ASSETS && <AssetsComponent safe={safe} handleError={handleError} addTransaction={addTransaction} />}\n      {selectedTab === Screens.POLICY && <PolicyComponent safe={safe} addTransaction={addTransaction} handleError={handleError} />}\n\n      {showTransactionInfo && <TransactionCreatedModal closeModal={() => setShowTransactionInfo(false)} changeScreen={closeModalAndSwitchScreen} />}\n    </section>\n  )\n}\n\nexport default SafeInteraction\n","import React, { useState } from 'react'\nimport { isAddress } from '@ethersproject/address'\n\ninterface Interface {\n  connectAddress: string | null\n  handleError: (error: Error) => void\n  createSafe: (addresses: string[], threshold: number) => void\n}\n\nconst CreateSafeComponent: React.FC<Interface> = ({ connectAddress, createSafe, handleError }) => {\n  const [addresses, setAddresses] = useState<string[]>([connectAddress ? connectAddress.toLowerCase() : ''])\n  const [threshold, setThreshold] = useState<number>(1)\n\n  const changeAddressValue = (evt: any) => {\n    const changeIndex = parseInt(evt.target.id.replace('address', ''))\n    const updateList = addresses.map((item: string, index: number) => index === changeIndex ? evt.target.value.toLowerCase() : item)\n    setAddresses(updateList)\n  }\n\n  const removeAddress = (changeIndex: number) => {\n    const updateList = addresses.filter((_item: string, index: number) => index !== changeIndex)\n    setAddresses(updateList)\n  }\n\n  const validateSafeSettings = () => {\n    const errorList: number[] = []\n    addresses.forEach((address: string, index: number) => {\n      if (!isAddress(address)) {\n        errorList.push(index + 1)\n      }\n    })\n\n    if (errorList.length !== 0) {\n      handleError(new Error(`Incorrect Addresses for: ${errorList.toString()}`))\n      return false\n    }\n\n    createSafe(addresses, threshold)\n  }\n\n  const loopOptions = (length: number) => {\n    const items = []\n    for (let index = 0; index < length; index++) {\n      items.push(<option key={index} value={index + 1}>{index + 1}</option>)\n    }\n    return items\n  }\n\n  return (\n    <div>\n      <h4>Create a new safe</h4>\n      <p>\n        A safe can have any number of owners associated with it. Your connected address has been added as the first account.<br/>\n        Click the <em>Add address</em> button to add additional addresses, and the <em>delete button</em> to remove addresses.\n      </p>\n\n      <ul>\n        {addresses.map((address: string, index: number) => (\n          <li key={index}>\n            <label>Address {index + 1}: </label>\n            <input type=\"text\"\n              id={`address${index}`}\n              value={address}\n              onChange={changeAddressValue}\n              className={`address${index}`}\n            />\n            <button className={`removeAddress${index}`} onClick={() => removeAddress(index)}>delete</button>\n          </li>\n        ))}\n      </ul>\n      <button className=\"addAddress\" onClick={() => setAddresses([...addresses, ''])}>Add address</button>\n\n      <p>Transactions require the confirmation of at least{' '}\n        <select className=\"threshold\" value={threshold.toString()} onChange={evt => setThreshold(parseInt(evt.target.value))}>\n          {loopOptions(addresses.length)}\n        </select>\n        signatures.\n      </p>\n      <button className=\"submit\" disabled={addresses.length === 0} onClick={validateSafeSettings}>Create Safe</button>\n    </div>\n  )\n}\n\nexport default CreateSafeComponent\n","import React, { useState } from 'react'\n\ninterface Interface {\n  connectToSafe: (safeAddress: string) => void\n  pastSafes: string[]\n}\n\nconst ConnectToSafeComponent: React.FC<Interface> = ({ connectToSafe, pastSafes }) => {\n  const [safeAddress, setSafeAddress] = useState<string>('')\n\n  return (\n    <div>\n      <h3>Connect to an existing safe</h3>\n      <label>Safe address</label>\n      <input className=\"safeAddress\" type=\"text\" value={safeAddress} onChange={evt => setSafeAddress(evt.target.value)} />\n      <button className=\"connect\" onClick={() => connectToSafe(safeAddress)}>Connect</button>\n\n      {pastSafes && pastSafes.length !== 0 && (\n        <>\n          <h4>Past Safes:</h4>\n          <ul>\n            {pastSafes.map((address: string) => (\n              <li key={address}>\n                <button\n                  className=\"icon\"\n                  onClick={() => connectToSafe(address)}>{address}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default ConnectToSafeComponent\n","import React, { useState, useEffect } from 'react'\nimport EthersSafe, { Safe } from '@gnosis.pm/safe-core-sdk'\nimport { EthersSafeFactory } from '@rsksmart/safe-factory-sdk'\nimport { ethers } from 'ethers'\n\nimport CreateSafeComponent from './CreateSafeComponent'\nimport ConnectToSafeComponent from './ConnectToSafeComponent'\nimport { getContracts } from '../../config'\nimport LoadingComponent from '../../components/LoadingComponent'\nimport { getKey, LocalStorageKeys } from '../../helpers/localStorage'\n\ninterface Interface {\n  web3Provider: any\n  chainId: number\n  handleSetSafe: (safe: Safe | EthersSafe) => any\n  handleError: (error: Error) => void\n  address: string | null\n}\n\nconst ChooseSafe: React.FC<Interface> = ({ web3Provider, chainId, handleSetSafe, handleError, address }) => {\n  // UI variables\n  const [isCreate, setIsCreate] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [pastSafes, setPastSafes] = useState<string[]>([])\n\n  useEffect(() => { setPastSafes(getKey(LocalStorageKeys.SAFES, chainId)) }, [])\n\n  // Create a new safe:\n  const createSafe = (addresses: string[], threshold: number) => {\n    setIsLoading(true)\n\n    const contracts = getContracts(chainId)\n    const provider = new ethers.providers.Web3Provider(web3Provider)\n\n    const signer = provider.getSigner()\n\n    const safeFactory = new EthersSafeFactory(\n      signer,\n      contracts.proxyFactoryAddress.toLowerCase(),\n      contracts.safeSingletonAddress.toLowerCase()\n    )\n\n    safeFactory.createSafe({ owners: addresses, threshold })\n      .then(handleSetSafe)\n      .catch(handleError)\n      .finally(() => setIsLoading(false))\n  }\n\n  // Connect to an existing safe:\n  const connectToSafe = (safeAddress: string) => {\n    setIsLoading(true)\n\n    const provider = new ethers.providers.Web3Provider(web3Provider)\n    const signer = provider.getSigner()\n\n    EthersSafe.create(ethers, safeAddress.toLowerCase(), signer)\n      .then(handleSetSafe)\n      .catch(handleError)\n      .finally(() => setIsLoading(false))\n  }\n\n  return isLoading ? <LoadingComponent />\n    : (\n      <section className=\"connect panel\">\n        <h2>\n        Create a safe, or connect to an existing one\n          <button onClick={() => setIsCreate(!isCreate)}>\n            {isCreate ? 'Connect to Safe' : 'Create Safe'}\n          </button>\n        </h2>\n        {isCreate ? (\n          <CreateSafeComponent\n            createSafe={createSafe}\n            handleError={handleError}\n            connectAddress={address}\n          />\n        ) : (\n          <ConnectToSafeComponent\n            pastSafes={pastSafes}\n            connectToSafe={connectToSafe}\n          />\n        )}\n      </section>\n    )\n}\n\nexport default ChooseSafe\n","import React from 'react'\nimport { version } from '../../package.json'\n\nconst FooterComponent: React.FC = () => {\n  return (\n    <section className=\"footer\">\n      <p>This is a sample app and does not save transactions outside of the state. If you refresh the app, or log in with a different account, the transactions will be cleared.</p>\n      <p>Copyright © 2021 IOV Labs. All rights reserved.</p>\n      <p>Version: {version}</p>\n    </section>\n  )\n}\n\nexport default FooterComponent\n","import React, { useState } from 'react'\nimport RLogin from '@rsksmart/rlogin'\nimport { Safe } from '@gnosis.pm/safe-core-sdk'\n\nimport './styles/App.scss'\nimport Web3Provider from './pages/start/ConnectWalletComponent'\nimport ConnectedBar from './components/ConnectedBar'\nimport SafeInteraction from './pages/safeInteraction'\nimport ChooseSafe from './pages/connectToSafe'\nimport FooterComponent from './components/FooterComponent'\nimport { saveSafeAddresToLocalStorage } from './helpers/localStorage'\n\nconst rLogin = new RLogin({\n  cacheProvider: false,\n  supportedChains: [4, 31, 1337]\n})\n\nfunction App () {\n  const [error, setError] = useState<null | string>('')\n\n  // Web3Provider and Safe variables\n  const [rLoginResponse, setRLoginResponse] = useState<{ provider: any, disconnect: any } | null>(null)\n  const [safe, setSafe] = useState<Safe | null>(null)\n\n  // provider variables\n  const [address, setAddress] = useState<string | null>(null)\n  const [chainId, setChainId] = useState<number | null>(null)\n\n  const web3ProviderResponse = (response: any, address: string, chainId: number) => {\n    setRLoginResponse(response)\n    setAddress(address)\n    setChainId(chainId)\n\n    // listen for address change and update:\n    response.provider.on('accountsChanged', (accounts: string[]) => setAddress(accounts[0]))\n  }\n\n  const handleSetSafe = (safe: Safe) => {\n    setSafe(safe)\n    handleError(null)\n    chainId && saveSafeAddresToLocalStorage(safe.getAddress(), chainId)\n  }\n\n  const handleError = (error: Error | null) => error ? setError(error.message) : setError(null)\n\n  const handleLogout = () => {\n    rLoginResponse?.disconnect()\n    setRLoginResponse(null)\n    setSafe(null)\n    setError(null)\n    setAddress(null)\n    setChainId(null)\n  }\n\n  return (\n    <div className={rLoginResponse ? 'App' : 'App signin'}>\n      {!rLoginResponse ? (\n        <Web3Provider\n          rLogin={rLogin}\n          setRLoginResponse={web3ProviderResponse}\n          handleError={handleError}\n        />\n      ) : <ConnectedBar chainId={chainId} walletAddress={address} />\n      }\n\n      {error && (\n        <section className=\"error\">\n          <p>{error}</p>\n          <button onClick={() => handleError(null)}>x</button>\n        </section>\n      )}\n\n      {rLoginResponse && chainId && !safe && (\n        <ChooseSafe\n          web3Provider={rLoginResponse.provider}\n          chainId={chainId}\n          handleSetSafe={handleSetSafe}\n          handleError={handleError}\n          address={address}\n        />\n      )}\n\n      {rLoginResponse && address && safe && (\n        <SafeInteraction\n          safe={safe}\n          walletAddress={address}\n          handleLogout={handleLogout}\n          handleError={handleError}\n        />\n      )}\n\n      {rLoginResponse && <FooterComponent />}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}