{"version":3,"sources":["constants.ts","images/rifWhite.svg","images/powered-by-iov.svg","pages/start/ConnectWalletComponent.tsx","images/rifGray.svg","components/ConnectedBar.tsx","pages/safeInteraction/Navigation.tsx","helpers/localStorage.ts","components/Modal.tsx","helpers/transactionListener.ts","images/loading.svg","components/ViewExplorerButton.tsx","components/LoadingComponent.tsx","pages/safeInteraction/transactions/ApprovedModal.tsx","pages/safeInteraction/transactions/ExecutedModal.tsx","components/CopyValueButton.tsx","components/ValueWithButtons.tsx","images/refresh.svg","pages/safeInteraction/transactions/TransactionDetailComponent.tsx","pages/safeInteraction/transactions/TransactionMenu.tsx","pages/safeInteraction/transactions/TransactionTabHelperText.tsx","pages/safeInteraction/transactions/index.tsx","pages/safeInteraction/Dashboard.tsx","components/ThresholdDropdown.tsx","pages/safeInteraction/policies/ChangeThresholdModal.tsx","pages/safeInteraction/policies/AddOwnerModal.tsx","pages/safeInteraction/policies/RemoveOwnerModal.tsx","pages/safeInteraction/policies/SwapOwnerModal.tsx","images/delete.svg","images/swap.svg","images/edit.svg","pages/safeInteraction/policies/index.tsx","pages/safeInteraction/assets/TransferValueModal.tsx","pages/safeInteraction/assets/TransferTokenModal.tsx","config/index.ts","pages/safeInteraction/assets/index.tsx","components/TransactionCreatedModal.tsx","helpers/serviceAdapter.ts","pages/safeInteraction/index.tsx","pages/connectToSafe/CreateSafeComponent.tsx","pages/connectToSafe/ConnectToSafeComponent.tsx","pages/connectToSafe/index.tsx","components/FooterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TransactionStatus","Screens","Web3Provider","rLogin","setRLoginResponse","handleError","className","src","rifSafeLogo","alt","onClick","connect","then","rLoginResponse","Promise","all","provider","request","method","response","parseInt","catch","poweredByLogo","ConnectedBar","walletAddress","chainId","rifGray","slice","length","id","chainIdtoString","LocalStorageKeys","Navigation","changeActive","handleLogout","selected","NavigationItem","name","toString","toLowerCase","style","textTransform","DASHBOARD","TRANSACTIONS","ASSETS","POLICY","map","Modal","handleClose","children","transactionListener","web3Provider","tx","resolve","reject","checkInterval","setInterval","getTransactionReceipt","clearInterval","status","Error","err","ViewExplorerButton","address","url","href","target","rel","xmlns","width","height","viewBox","fill","fillRule","d","LoadingComponent","text","hash","loadingImage","ApprovedModal","ExecutedModal","CopyButton","value","copyTextField","useRef","type","current","select","document","execCommand","defaultValue","ref","position","left","ValueWithButtons","CopyValueButton","TransactionDetailComponent","safe","transactionBundle","approveTransaction","executeTransaction","rejectTransaction","transaction","useState","showDetails","setShowDetails","signatures","setSignatures","threshold","setThreshold","isRefreshing","setIsRefreshing","formatted","setFormatted","useEffect","getApprovals","InputDataDecoder","safeAbi","decodeData","data","erc20Abi","getThreshold","safeThreshold","offChain","Array","from","keys","signature","isOnChain","getOwnersWhoApprovedTx","signers","onChainSigners","finally","handleApprove","onChain","walletHasSigned","filter","canExecute","colSpan","isReject","to","getAddress","PENDING","refreshIcon","nonce","disabled","JSON","stringify","approval","TransactionMenu","handleClick","MenuItem","EXECUTED","REJECTED","TransactionTabHelperText","count","screen","TransactionsPanel","updateTransactionBundle","addTransaction","transactions","showApprovedModal","setShowApprovedModal","approvedOffChainModal","setApprovedOffChainModal","showExecutedModal","setShowExecutedModal","currentSubTab","setCurrentSubTab","currentTransactions","setCurrentTransactions","safeNonce","setSafeNonce","changeCurrentTab","tran","getNonce","createRejectionTransaction","rejectTx","approveTransactionHash","approveTransactionOffChain","bundle","getTransactionHash","result","getProvider","receipt","transactionHash","signTransaction","handleExecutionTransaction","currentNonce","isPending","hasDuplicate","t","undefined","Dashboard","balance","setBalance","setNonce","getBalance","ThresholdDropdown","onChange","numberOfOwners","options","index","push","evt","number","ChangeThresholdModal","currentThreshold","handleSubmit","newThreshold","setNewThreshold","AddOwnerModal","newOwner","setNewOwner","isAddress","RemoveOwnerModal","removeAddress","SwapOwnerModal","oldAddress","PolicyComponent","owners","setOwners","addNewOwner","setAddNewOwner","changeThreshold","setChangeThreshold","removeOwner","setRemoveOwner","swapOwner","setSwapOwner","getOwners","afterTransaction","owner","deleteIcon","swapIcon","editIcon","getChangeThresholdTx","getAddOwnerTx","getRemoveOwnerTx","getSwapOwnerTx","TransferValueModal","createTransaction","amount","setTransaction","formattedData","TransferTokenModal","token","symbol","getContracts","testnet","local","AssetsComponent","showTransfer","setShowTransfer","showTokenTransfer","setShowTokenTransfer","tokens","setTokens","getSafeBalance","getChainId","getERC2Balance","decimals","contractAddress","rifToken","signer","getSigner","Contract","balanceOf","updateToken","Math","pow","newTokenList","find","findToken","console","log","ERC20TransactionBuilder","create","txBuilder","bigAmount","BigNumber","mul","transfer","TransactionCreatedModal","closeModal","changeScreen","bundleToServiceArray","bundles","safeAddress","serviceArray","safeTxGas","baseGas","gasPrice","safeTxHash","isExecuted","isSuccesful","bundleToService","serviceToBundles","serviceResponse","safeTransaction","SafeTransaction","operation","gasToken","refundReceiver","serviceToBundle","setKey","key","localStorage","setItem","setJsonKey","getKey","content","getItem","parse","saveTransactionsToLocalStorage","converted","SafeInteraction","selectedTab","setSelectedTab","showTransactionInfo","setShowTransactionInfo","appNonce","setAppNonce","getTransactionsFromLocalStorage","setTransactions","incomingTransaction","nonceSorted","sort","a","b","list","CreateSafeComponent","connectAddress","createSafe","addresses","setAddresses","changeAddressValue","changeIndex","replace","updateList","item","_item","items","loopOptions","errorList","forEach","ConnectToSafeComponent","connectToSafe","pastSafes","setSafeAddress","ChooseSafe","handleSetSafe","isCreate","setIsCreate","isLoading","setIsLoading","setPastSafes","SAFES","contracts","ethers","providers","EthersSafeFactory","proxyFactoryAddress","safeSingletonAddress","EthersSafe","FooterComponent","version","RLogin","cacheProvider","supportedChains","App","error","setError","setSafe","setAddress","setChainId","message","on","accounts","safes","includes","saveSafeAddresToLocalStorage","disconnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5318d5c1.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n\nexport enum TransactionStatus {\n  PENDING = 'Pending',\n  EXECUTED = 'Executed',\n  REJECTED = 'Rejected'\n}\n\nexport enum Screens {\n  DASHBOARD = 'DASHBOARD',\n  TRANSACTIONS = 'TRANSACTIONS',\n  ASSETS = 'ASSETS',\n  POLICY = 'POLICY'\n}\n","export default __webpack_public_path__ + \"static/media/rifWhite.85d0f2d8.svg\";","export default __webpack_public_path__ + \"static/media/powered-by-iov.a0397e40.svg\";","import React from 'react'\nimport { RLoginButton } from '@rsksmart/rlogin'\nimport rifSafeLogo from '../../images/rifWhite.svg'\nimport poweredByLogo from '../../images/powered-by-iov.svg'\n\ninterface Interface {\n  rLogin: any\n  setRLoginResponse: (response: any, address: string, chainId: number) => void\n  handleError: (error: Error) => void\n}\n\nconst Web3Provider: React.FC<Interface> = ({ rLogin, setRLoginResponse, handleError }) => {\n  const handleLogin = () =>\n    rLogin.connect()\n      .then((rLoginResponse: any) => {\n        Promise.all([\n          rLoginResponse.provider.request({ method: 'eth_accounts' }),\n          rLoginResponse.provider.request({ method: 'eth_chainId' })\n        ]).then((response: any) => {\n          setRLoginResponse(rLoginResponse, response[0][0], parseInt(response[1]))\n        })\n      })\n      .catch(handleError)\n\n  return (\n    <section className=\"login\">\n      <div className=\"logo\">\n        <img src={rifSafeLogo} alt=\"RIF\" />\n        Safe and Vault Sample App\n      </div>\n      <h2>Login with your wallet</h2>\n      <p><RLoginButton onClick={handleLogin}>Connect with rLogin!</RLoginButton></p>\n      <img src={poweredByLogo} alt=\"Powered by IOV Labs\" />\n      <p className=\"legal\">Copyright © 2021 IOV Labs. All rights reserved.</p>\n    </section>\n  )\n}\n\nexport default Web3Provider\n","export default __webpack_public_path__ + \"static/media/rifGray.3588d3de.svg\";","import React from 'react'\nimport rifGray from '../images/rifGray.svg'\n\ninterface Interface {\n  chainId: number | null\n  walletAddress: string | null\n}\n\nconst ConnectedBar: React.FC<Interface> = ({ walletAddress, chainId }) => {\n  const chainIdtoString = (id: number) => {\n    switch (id) {\n      case 31: return 'RSK Testnet'\n      case 30: return 'RSK Mainnet'\n      default: return 'Local'\n    }\n  }\n  return (\n    <section className=\"header\">\n      <ul className=\"inline\">\n        <li className=\"logo\">\n          <img src={rifGray} alt=\"RIF Safe\" />\n          Safe and Vault Sample App\n        </li>\n        {walletAddress && (\n          <li className=\"address\">\n            {`${walletAddress.slice(0, 8)}...${walletAddress.slice(walletAddress.length - 6)}`}\n          </li>\n        )}\n        <li className=\"chainId\"><span>{chainId && chainIdtoString(chainId)}</span></li>\n      </ul>\n    </section>\n  )\n}\n\nexport default ConnectedBar\n","import React from 'react'\nimport { Screens } from '../../constants'\n\ninterface Interface {\n  handleLogout: () => void\n  changeActive: (screen: Screens) => void\n  selected: Screens\n}\n\nconst Navigation: React.FC<Interface> = ({ changeActive, handleLogout, selected }) => {\n  const NavigationItem: React.FC<{ name: Screens }> = ({ name }) => {\n    const toString = name.toString().toLowerCase()\n    return (\n      <li>\n        <button\n          style={{ textTransform: 'capitalize' }}\n          className={selected === name ? `selected ${toString}` : toString}\n          onClick={() => changeActive(name)}\n        >{toString}</button>\n      </li>\n    )\n  }\n\n  return (\n    <ul className=\"navigation\">\n      {[Screens.DASHBOARD, Screens.TRANSACTIONS, Screens.ASSETS, Screens.POLICY]\n        .map((name: Screens) =>\n          <NavigationItem key={name} name={name} />\n        )}\n      <li className=\"logout\"><button onClick={handleLogout}>Disconnect Wallet</button></li>\n    </ul>\n  )\n}\n\nexport default Navigation\n","import { TransactionBundle } from '../pages/safeInteraction'\nimport { bundleToServiceArray, serviceToBundles } from './serviceAdapter'\n\n/* eslint-disable no-unused-vars */\nexport enum LocalStorageKeys {\n  SAFES = 'SAFES',\n  TRANSACTIONS = 'TRANSACTIONS'\n}\n\nconst setKey = (key: string, value: string) =>\n  localStorage.setItem(key, value)\n\nconst setJsonKey = (key: LocalStorageKeys, chainId: number, value: any) =>\n  setKey(`${key}_${chainId.toString()}`, JSON.stringify(value))\n\nexport const getKey = (key: LocalStorageKeys, chainId: number) => {\n  const content = localStorage.getItem(`${key}_${chainId.toString()}`)\n  return content ? JSON.parse(content) : null\n}\n\nexport const saveSafeAddresToLocalStorage = (safeAddress: string, chainId: number) => {\n  const safes = getKey(LocalStorageKeys.SAFES, chainId)\n  if (!safes) {\n    return setJsonKey(LocalStorageKeys.SAFES, chainId, [safeAddress.toLowerCase()])\n  }\n\n  return !safes.includes(safeAddress.toLowerCase())\n    ? setJsonKey(LocalStorageKeys.SAFES, chainId, [...safes, safeAddress.toLowerCase()])\n    : null\n}\n\nexport const saveTransactionsToLocalStorage = (transactions: TransactionBundle[], safeAddress: string) => {\n  const converted = bundleToServiceArray(transactions, safeAddress)\n  setKey(`${LocalStorageKeys.TRANSACTIONS}_${safeAddress.toLowerCase()}`, JSON.stringify(converted))\n}\n\nexport const getTransactionsFromLocalStorage = (safeAddress: string) => {\n  const content = localStorage.getItem(`${LocalStorageKeys.TRANSACTIONS}_${safeAddress.toLowerCase()}`)\n  return content ? serviceToBundles(JSON.parse(content), safeAddress) : null\n}\n","import React, { ReactNode } from 'react'\n\ninterface Interface {\n  handleClose?: () => void\n  children: ReactNode\n}\n\nconst Modal: React.FC<Interface> = ({ handleClose, children }) => {\n  return (\n    <div className=\"modal\">\n      <div className=\"modalBody\">\n        <div className=\"modalHeader\">\n          {handleClose && <button className=\"close\" onClick={handleClose}>x</button>}\n        </div>\n        <div className=\"modalContent\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal\n","import { Provider, TransactionReceipt } from '@ethersproject/providers'\n\nexport const transactionListener = (web3Provider: Provider, tx: string) =>\n  new Promise((resolve, reject) => {\n    const checkInterval = setInterval(() =>\n      web3Provider.getTransactionReceipt(tx)\n        .then((response: TransactionReceipt) => {\n          if (response) {\n            clearInterval(checkInterval)\n            response.status && response.status === 1 ? resolve(response) : reject(new Error('Transaction Failed'))\n          }\n        })\n        .catch((err: Error) => reject(err))\n    , 2000)\n  })\n","export default __webpack_public_path__ + \"static/media/loading.06d7c63f.svg\";","import React from 'react'\n\ninterface Interface {\n  address?: string\n  tx?: string\n}\n\nconst ViewExplorerButton: React.FC<Interface> = ({ address, tx }) => {\n  const url = address ? `address/${address.toLowerCase()}` : `tx/${tx}`\n  return (\n    <a\n      href={`http://explorer.testnet.rsk.co/${url}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"icon explorerLink\"\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\"><path d=\"M0 0H16V16H0z\"></path><path className=\"icon-color\" fillRule=\"nonzero\" d=\"M13 13v-2c0-.552.448-1 1-1s1 .448 1 1v2c0 1.105-.895 2-2 2H3c-1.105 0-2-.895-2-2V3c0-1.105.895-2 2-2h2c.552 0 1 .448 1 1s-.448 1-1 1H3v10h10z\"></path><path className=\"icon-color\" d=\"M11.586 3H9c-.552 0-1-.448-1-1s.448-1 1-1h5c.276 0 .526.112.707.293.181.18.293.43.293.707v5c0 .552-.448 1-1 1s-1-.448-1-1V4.414l-6.243 6.243c-.39.39-1.023.39-1.414 0-.39-.39-.39-1.024 0-1.414L11.586 3z\"></path></g></svg>\n    </a>\n  )\n}\n\nexport default ViewExplorerButton\n","import React from 'react'\nimport loadingImage from '../images/loading.svg'\nimport ViewExplorerButton from './ViewExplorerButton'\n\ninterface Interface {\n  text?: string\n  hash?: string\n}\n\nconst LoadingComponent: React.FC<Interface> = ({ text, hash }) => {\n  return (\n    <div className=\"loading\">\n      <p><img src={loadingImage} alt=\"Loading...\" /></p>\n      {(text || hash) && (\n        <p>\n          {text}\n          {hash && <> View it on the explorer <ViewExplorerButton tx={hash} /></>}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default LoadingComponent\n","import React from 'react'\nimport LoadingComponent from '../../../components/LoadingComponent'\nimport Modal from '../../../components/Modal'\nimport ViewExplorerButton from '../../../components/ViewExplorerButton'\n\ninterface Interface {\n  handleClose: () => void\n  hash: string\n}\n\nconst ApprovedModal: React.FC<Interface> = ({ hash, handleClose }) => {\n  if (hash === 'LOADING') {\n    return (\n      <Modal>\n        <LoadingComponent text=\"Adding the signature to the transaction.\" />\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal handleClose={handleClose}>\n      <h2>Transaction Approved</h2>\n      <p>Your signature has been added to this transaction! This is the hash of the transaction:</p>\n      <p>\n        <span className=\"readonly\">{hash}</span>\n        <ViewExplorerButton tx={hash} />\n      </p>\n      <p><button onClick={handleClose}>Close modal</button></p>\n    </Modal>\n  )\n}\n\nexport default ApprovedModal\n","import React from 'react'\nimport LoadingComponent from '../../../components/LoadingComponent'\nimport Modal from '../../../components/Modal'\nimport ViewExplorerButton from '../../../components/ViewExplorerButton'\n\ninterface Interface {\n  handleClose: () => void\n  status: { hash?: string, status?: string }\n}\n\nconst ExecutedModal: React.FC<Interface> = ({ handleClose, status }) => {\n  if (status.status === 'LOADING') {\n    return (\n      <Modal>\n        <LoadingComponent text=\"Executing the transaction.\" hash={status.hash} />\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal handleClose={handleClose}>\n      <h2>Transaction executed</h2>\n      <p>This is the hash of the transaction:</p>\n      <p>\n        <span className=\"readonly\">{status.hash}</span>\n        <ViewExplorerButton tx={status.hash} />\n      </p>\n      <p><button onClick={handleClose}>Close modal</button></p>\n    </Modal>\n  )\n}\n\nexport default ExecutedModal\n","import React, { useRef } from 'react'\n\ninterface CopyButtonInterface {\n  value: string\n}\n\nconst CopyButton: React.FC<CopyButtonInterface> = ({ value }) => {\n  const copyTextField = useRef<HTMLInputElement>(null)\n\n  const handleClick = () => {\n    copyTextField.current && copyTextField.current.select()\n    document.execCommand('copy')\n  }\n\n  return (\n    <span className=\"copyButton\">\n      <button type=\"button\" className=\"icon\" onClick={handleClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\"><path d=\"M0 0H16V16H0z\"></path><path className=\"icon-color\" fillRule=\"nonzero\" d=\"M10 10h3V3H8v1c1.105 0 2 .895 2 2v4zM6 4V3c0-1.105.895-2 2-2h5c1.105 0 2 .895 2 2v7c0 1.105-.895 2-2 2h-3v1c0 1.105-.895 2-2 2H3c-1.105 0-2-.895-2-2V6c0-1.105.895-2 2-2h3zM3 6v7h5V6H3z\"></path></g></svg>\n      </button>\n\n      <input\n        type=\"text\"\n        className=\"copyText\"\n        defaultValue={value}\n        ref={copyTextField}\n        style={{ position: 'absolute', left: '-10000px' }}\n      />\n    </span>\n  )\n}\n\nexport default CopyButton\n","import React from 'react'\nimport CopyValueButton from './CopyValueButton'\nimport ViewExplorerButton from './ViewExplorerButton'\n\ninterface Interface {\n  value: string\n}\n\nconst ValueWithButtons: React.FC<Interface> = ({ value }) => {\n  return (\n    <>\n      {value}\n      <CopyValueButton value={value} />\n      <ViewExplorerButton address={value} />\n    </>\n  )\n}\n\nexport default ValueWithButtons\n","export default __webpack_public_path__ + \"static/media/refresh.7a8b3bf4.svg\";","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport React, { useEffect, useState } from 'react'\nimport ValueWithButtons from '../../../components/ValueWithButtons'\nimport refreshIcon from '../../../images/refresh.svg'\n\nimport safeAbi from '@gnosis.pm/safe-core-sdk/dist/src/abis/SafeAbiV1-2-0.json'\nimport erc20Abi from '../assets/erc20.json'\nimport InputDataDecoder from 'ethereum-input-data-decoder'\nimport { TransactionBundle } from '..'\nimport CopyValueButton from '../../../components/CopyValueButton'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  safe: Safe\n  transactionBundle: TransactionBundle\n  walletAddress: string\n  approveTransaction?: (transaction: TransactionBundle, onChain: boolean) => Promise<any>\n  executeTransaction?: (transactionBundle: TransactionBundle) => void\n  rejectTransaction?: (transaction: SafeTransaction) => void\n  handleError?: (error: Error) => void\n}\n\ninterface SignatureType {\n  signature: string,\n  isOnChain: boolean\n}\n\nconst TransactionDetailComponent: React.FC<Interface> = ({\n  safe, transactionBundle, walletAddress, handleError, approveTransaction, executeTransaction, rejectTransaction\n}) => {\n  const { transaction, hash } = transactionBundle\n\n  const [showDetails, setShowDetails] = useState<boolean>(false)\n  const [signatures, setSignatures] = useState<SignatureType[]>([])\n  const [threshold, setThreshold] = useState<number>(0)\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false)\n  const [formatted, setFormatted] = useState<any>(null)\n\n  useEffect(() => {\n    // get transaction approvals\n    getApprovals()\n\n    // try to decode the data\n    const formatted = new InputDataDecoder(safeAbi).decodeData(transaction.data.data)\n    if (formatted.method) {\n      setFormatted(formatted)\n    } else {\n      setFormatted(new InputDataDecoder(erc20Abi).decodeData(transaction.data.data))\n    }\n\n    safe.getThreshold().then((safeThreshold: number) => setThreshold(safeThreshold))\n  }, [transaction])\n\n  const getApprovals = () => {\n    setIsRefreshing(true)\n\n    const offChain = Array.from(transaction.signatures.keys()).map((signature: string) => ({ signature, isOnChain: false }))\n\n    safe.getOwnersWhoApprovedTx(hash)\n      .then((signers: string[]) => {\n        const onChainSigners = signers.map((signature: string) => ({ signature, isOnChain: true }))\n        setSignatures([...offChain, ...onChainSigners])\n      })\n      .catch(handleError)\n      .finally(() => setIsRefreshing(false))\n  }\n\n  const getTransactionName = () => {\n    if (transactionBundle.isReject) {\n      return 'Rejection Transaction'\n    } else if (transaction.data.data === '0x') {\n      return 'Send Value'\n    } else if (formatted.method) {\n      return formatted.method\n    } else {\n      return 'Transaction'\n    }\n  }\n\n  const handleApprove = (onChain: boolean) =>\n    approveTransaction && approveTransaction(transactionBundle, onChain)\n      .then(() => getApprovals())\n\n  const handleReject = () =>\n    rejectTransaction && rejectTransaction(transaction)\n\n  const walletHasSigned = signatures.filter((value: SignatureType) => value.signature.toLowerCase() === walletAddress.toLowerCase()).length === 1\n  const canExecute = threshold > signatures.length\n\n  return (\n    <div className=\"transaction\">\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={2}>{formatted && getTransactionName()}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>to:</th>\n            <td>\n              {transaction.data.to === safe.getAddress() && <em>(Safe) </em>}\n              <ValueWithButtons value={transaction.data.to} />\n            </td>\n          </tr>\n          {transactionBundle.status === TransactionStatus.PENDING && (\n            <tr>\n              <th>approvals:</th>\n              <td>\n                {isRefreshing ? 'loading...' : `${signatures.length} out of ${threshold}`}\n                <button className=\"icon\" onClick={getApprovals}>\n                  <img src={refreshIcon} alt=\"refresh\" />\n                </button>\n              </td>\n            </tr>\n          )}\n          {transaction.data.value !== '0' && (\n            <tr>\n              <th>value:</th>\n              <td><p>{transaction.data.value}</p></td>\n            </tr>\n          )}\n          <tr>\n            <th>nonce:</th>\n            <td><p>{transaction.data.nonce}</p></td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"buttons\">\n        <button onClick={() => setShowDetails(!showDetails)}>{showDetails ? 'hide ' : 'show '}details</button>\n        {approveTransaction && (\n          <>\n            <button\n              disabled={walletHasSigned}\n              onClick={() => handleApprove(true)}>approve on-chain</button>\n            <button\n              disabled={walletHasSigned}\n              onClick={() => handleApprove(false)}>approve off-chain</button>\n          </>\n        )}\n        {!transactionBundle.isReject && rejectTransaction && <button\n          onClick={handleReject}\n        >create rejection</button>}\n        {executeTransaction && <button\n          disabled={canExecute}\n          onClick={() => executeTransaction(transactionBundle)}>execute</button>}\n      </div>\n\n      {showDetails && (\n        <table><tbody>\n          <tr>\n            <th>Transaction Hash</th>\n            <td>\n              <p>{hash}<CopyValueButton value={hash} /></p>\n            </td>\n          </tr>\n          {transaction.data.data !== '0x' && (\n            <>\n              <tr>\n                <th>Raw Data</th>\n                <td><p className=\"data\">{transaction.data.data}</p></td>\n              </tr>\n              <tr>\n                <th>Decoded Data</th>\n                <td>\n                  <pre>{JSON.stringify(formatted, null, 2)}</pre>\n                </td>\n              </tr>\n            </>\n          )}\n          <tr>\n            <th>Approvals:</th>\n            <td>\n              {signatures.length === 0 ? <p><em>No signatures</em></p> : (\n                <>\n                  <ol >\n                    {signatures.map((approval: SignatureType) =>\n                      <li key={approval.signature}>\n                        <ValueWithButtons value={approval.signature} />\n                        {`(${approval.isOnChain ? 'on' : 'off'}-chain)`}\n                        {walletAddress.toLowerCase() === approval.signature.toLowerCase() && <em>(Connected Account)</em>}\n                      </li>)}\n                  </ol>\n                </>\n              )}\n            </td>\n          </tr>\n        </tbody></table>\n      )}\n    </div>\n  )\n}\n\nexport default TransactionDetailComponent\n","import React from 'react'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  selected: TransactionStatus,\n  handleClick: (tab: TransactionStatus) => void\n}\n\nconst TransactionMenu: React.FC<Interface> = ({ handleClick, selected }) => {\n  const MenuItem: React.FC<{name: TransactionStatus}> = ({ name }) =>\n    <li>\n      <button\n        onClick={() => handleClick(name)}\n        className={selected === name ? 'selected' : ''}\n      >{name}</button></li>\n\n  return (\n    <ul className=\"inline\">\n      <MenuItem name={TransactionStatus.PENDING} />\n      <MenuItem name={TransactionStatus.EXECUTED} />\n      <MenuItem name={TransactionStatus.REJECTED} />\n    </ul>\n  )\n}\n\nexport default TransactionMenu\n","import React from 'react'\nimport { TransactionStatus } from '../../../constants'\n\ninterface Interface {\n  screen: TransactionStatus\n  count: number\n}\n\nconst TransactionTabHelperText: React.FC<Interface> = ({ count, screen }) => {\n  if (count === 0) {\n    return (\n      <p><em>No {screen.toString()} transactions</em></p>\n    )\n  }\n\n  switch (screen) {\n    case TransactionStatus.PENDING:\n      return (\n        <p>Transactions must be executed in nonce order. Please execute the first transaction before interacting with the next. If you do not want to execute the next transaction, create and execute a rejection transaction which will move to the next nonce.</p>\n      )\n    case TransactionStatus.REJECTED:\n      return (\n        <p>These transactions have a corresponding &quot;Executed&quot; transaction with the same nonce.</p>\n      )\n  }\n\n  return (<></>)\n}\n\nexport default TransactionTabHelperText\n","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport { rejectTx, executeTransaction } from '@rsksmart/safe-transactions-sdk'\nimport { ContractTransaction } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport { TransactionBundle } from '..'\nimport Modal from '../../../components/Modal'\nimport { TransactionStatus } from '../../../constants'\nimport { transactionListener } from '../../../helpers/transactionListener'\nimport ApprovedModal from './ApprovedModal'\nimport ExecutedModal from './ExecutedModal'\nimport TransactionDetailComponent from './TransactionDetailComponent'\nimport TransactionMenu from './TransactionMenu'\nimport TransactionTabHelperText from './TransactionTabHelperText'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error) => void\n  addTransaction: (transaction: SafeTransaction, isReject: boolean) => void\n  updateTransactionBundle: (transaction: TransactionBundle) => void\n  transactions: TransactionBundle[]\n  walletAddress: string\n}\n\nconst TransactionsPanel: React.FC<Interface> = ({ safe, handleError, updateTransactionBundle, addTransaction, walletAddress, transactions }) => {\n  const [showApprovedModal, setShowApprovedModal] = useState<string | null>(null)\n  const [approvedOffChainModal, setApprovedOffChainModal] = useState<boolean>(false)\n  const [showExecutedModal, setShowExecutedModal] = useState<{ status: string, hash?: string } | null>(null)\n\n  const [currentSubTab, setCurrentSubTab] = useState<TransactionStatus>(TransactionStatus.PENDING)\n  const [currentTransactions, setCurrentTransactions] = useState<TransactionBundle[]>([])\n\n  const [safeNonce, setSafeNonce] = useState<number>(0)\n\n  const changeCurrentTab = (name: TransactionStatus) => {\n    setCurrentSubTab(name)\n    setCurrentTransactions(transactions.filter((tran: TransactionBundle) => tran.status === name))\n  }\n\n  useEffect(() => {\n    changeCurrentTab(TransactionStatus.PENDING)\n    safe.getNonce().then((nonce: number) => setSafeNonce(nonce))\n  }, [transactions])\n\n  const createRejectionTransaction = (transaction: SafeTransaction) =>\n    rejectTx(safe, transaction)\n      .then((transaction: SafeTransaction) => addTransaction(transaction, true))\n\n  // Approve/Sign a transaction\n  const approveTransaction = (transaction: TransactionBundle, onChain: boolean) =>\n    onChain ? approveTransactionHash(transaction) : approveTransactionOffChain(transaction)\n\n  // Sign transaction \"on-chain\"\n  const approveTransactionHash = (bundle: TransactionBundle) => {\n    setShowApprovedModal('LOADING')\n\n    return safe.getTransactionHash(bundle.transaction)\n      .then((hash: string) =>\n        safe.approveTransactionHash(hash)\n          .then((result: ContractTransaction) => transactionListener(safe.getProvider(), result.hash))\n          .then((receipt: any) => setShowApprovedModal(receipt.transactionHash)))\n      .catch((err: Error) => {\n        setShowApprovedModal(null)\n        handleError(err)\n      })\n  }\n\n  const approveTransactionOffChain = (bundle: TransactionBundle) =>\n    safe.signTransaction(bundle.transaction)\n      .then(() => {\n        updateTransactionBundle(bundle)\n        setApprovedOffChainModal(true)\n      })\n      .catch(handleError)\n\n  // Execute transaction\n  const handleExecutionTransaction = (bundle: TransactionBundle) => {\n    executeTransaction(safe, bundle.transaction)\n      .then((result: ContractTransaction) => {\n        setShowExecutedModal({ status: 'LOADING', hash: result.hash })\n        return transactionListener(safe.getProvider(), result.hash)\n      })\n      .then((receipt: any) => {\n        setShowExecutedModal({ status: 'COMPLETE', hash: receipt.transactionHash })\n        updateTransactionBundle({ ...bundle, status: TransactionStatus.EXECUTED })\n      })\n      .catch((err: Error) => {\n        setShowExecutedModal(null)\n        handleError(err)\n      })\n  }\n\n  return (\n    <>\n      <section className=\"panel\">\n        <h2>Transactions</h2>\n\n        <TransactionMenu\n          selected={currentSubTab}\n          handleClick={changeCurrentTab}\n        />\n\n        <h3>{`${currentSubTab.toString()} Transactions:`}</h3>\n\n        <TransactionTabHelperText count={currentTransactions.length} screen={currentSubTab} />\n\n        {currentTransactions.map((transaction: TransactionBundle) => {\n          const currentNonce = safeNonce === transaction.transaction.data.nonce\n          const isPending = currentSubTab === TransactionStatus.PENDING\n          const hasDuplicate = currentTransactions.filter((t: TransactionBundle) => t.transaction.data.nonce === transaction.transaction.data.nonce).length > 1\n\n          return <TransactionDetailComponent\n            key={transaction.hash}\n            safe={safe}\n            transactionBundle={transaction}\n            walletAddress={walletAddress}\n            handleError={handleError}\n            approveTransaction={currentSubTab === TransactionStatus.PENDING ? approveTransaction : undefined}\n            executeTransaction={(isPending && currentNonce) ? handleExecutionTransaction : undefined}\n            rejectTransaction={(isPending && currentNonce && !hasDuplicate) ? createRejectionTransaction : undefined}\n          />\n        })}\n      </section>\n\n      {showApprovedModal && <ApprovedModal hash={showApprovedModal} handleClose={() => setShowApprovedModal(null)} />}\n      {showExecutedModal && <ExecutedModal status={showExecutedModal} handleClose={() => setShowExecutedModal(null)} />}\n      {approvedOffChainModal && <Modal handleClose={() => setApprovedOffChainModal(false)}>\n        <h2>Signature Added</h2>\n        <p>Since this is a sample app, this signature will be saved in local state only. It will not be saved if the app refreshed.</p>\n      </Modal>}\n    </>\n  )\n}\n\nexport default TransactionsPanel\n","import { Safe } from '@gnosis.pm/safe-core-sdk'\nimport React, { useEffect, useState } from 'react'\nimport ValueWithButtons from '../../components/ValueWithButtons'\nimport refreshIcon from '../../images/refresh.svg'\n\ninterface Interface {\n  safe: Safe\n}\n\nconst Dashboard: React.FC<Interface> = ({ safe }) => {\n  const [balance, setBalance] = useState<number>(0)\n  const [nonce, setNonce] = useState<number | null>(null)\n\n  useEffect(() => {\n    getBalance()\n    getNonce()\n  }, [safe])\n\n  const getBalance = () => safe.getBalance().then((balance: any) => setBalance(balance))\n  const getNonce = () => safe.getNonce().then((nonce: number) => setNonce(nonce))\n\n  return (\n    <section className=\"panel\">\n      <h2>Safe Dashboard</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Safe Address</th>\n            <td><ValueWithButtons value={safe.getAddress()} /></td>\n          </tr>\n          <tr className=\"text\">\n            <th>Balance</th>\n            <td>\n              {(balance / 1000000000000000000).toString()}\n              <button onClick={getBalance} className=\"icon\"><img src={refreshIcon} alt=\"Refresh\" /></button>\n            </td>\n          </tr>\n          {nonce !== null && (\n            <tr className=\"text\">\n              <th>Nonce</th>\n              <td>\n                {nonce.toString()}\n                <button onClick={getNonce} className=\"icon\"><img src={refreshIcon} alt=\"Refresh\" /></button>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </section>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\n\ninterface Interface {\n  value: number\n  onChange: (value: number) => void\n  numberOfOwners: number\n}\n\nconst ThresholdDropdown: React.FC<Interface> = ({ value, onChange, numberOfOwners }) => {\n  const options = []\n  for (let index = 1; index <= numberOfOwners; index++) {\n    options.push(index)\n  }\n\n  const handleChange = (evt: any) => onChange(parseInt(evt.target.value))\n\n  return (\n    <select value={value} onChange={handleChange}>\n      {options.map((number: number) => <option key={number} value={number}>{number}</option>)}\n    </select>\n  )\n}\n\nexport default ThresholdDropdown\n","import React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  currentThreshold: number\n  handleSubmit: (newThreshold: number) => void\n}\n\nconst ChangeThresholdModal: React.FC<Interface> = ({ numberOfOwners, currentThreshold, handleSubmit }) => {\n  const [newThreshold, setNewThreshold] = useState<number>(currentThreshold)\n\n  const options = []\n  for (let index = 1; index <= numberOfOwners; index++) {\n    options.push(index)\n  }\n\n  return (\n    <div>\n      <h3>Change threshold</h3>\n      <p>Change the number of approvers for a transaction to be executed</p>\n      <label>New threshold:</label>\n      <ThresholdDropdown\n        numberOfOwners={numberOfOwners}\n        value={newThreshold}\n        onChange={(value: number) => setNewThreshold(value)}\n      />\n\n      <p><button onClick={() => handleSubmit(newThreshold)}>Change threshold</button></p>\n    </div>\n  )\n}\n\nexport default ChangeThresholdModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  handleSubmit: (newOwner: string, newThreshold: number) => void\n  handleError: (err: Error) => void\n}\n\nconst AddOwnerModal: React.FC<Interface> = ({ handleSubmit, handleError, numberOfOwners }) => {\n  const [newOwner, setNewOwner] = useState<string>('')\n  const [newThreshold, setNewThreshold] = useState<number>(numberOfOwners)\n\n  const validateAddress = () => {\n    isAddress(newOwner.toLowerCase())\n      ? handleSubmit(newOwner.toLowerCase(), newThreshold)\n      : handleError(new Error('Value is not an address.'))\n  }\n\n  return (\n    <div>\n      <h3>Add new owner</h3>\n      <label>\n        Address</label>\n      <input type=\"text\" className=\"newOwner\" value={newOwner} onChange={evt => setNewOwner(evt.target.value)} />\n\n      <label>New Threshold</label>\n      <ThresholdDropdown\n        numberOfOwners={numberOfOwners}\n        value={newThreshold}\n        onChange={(value: number) => setNewThreshold(value)}\n      />\n\n      <p><button onClick={validateAddress}>Update</button></p>\n    </div>\n  )\n}\n\nexport default AddOwnerModal\n","import React, { useState } from 'react'\nimport ThresholdDropdown from '../../../components/ThresholdDropdown'\n\ninterface Interface {\n  numberOfOwners: number\n  handleSubmit: (address: string, threshold: number) => void\n  removeAddress: string\n}\n\nconst RemoveOwnerModal: React.FC<Interface> = ({ numberOfOwners, handleSubmit, removeAddress }) => {\n  const [threshold, setThreshold] = useState<number>(numberOfOwners - 1)\n\n  return (\n    <div>\n      <h3>Remove owner</h3>\n      <p>Are you sure you want to remove this owner?</p>\n      <span className=\"readonly\">{removeAddress}</span>\n\n      <p>\n        <label>New threshold:</label>\n        <ThresholdDropdown\n          numberOfOwners={numberOfOwners - 1}\n          value={threshold}\n          onChange={(value: number) => setThreshold(value)} />\n      </p>\n\n      <p><button onClick={() => handleSubmit(removeAddress.toLowerCase(), threshold)}>Remove</button></p>\n    </div>\n  )\n}\n\nexport default RemoveOwnerModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\n\ninterface Interface {\n  handleError: (err: Error) => void\n  handleSubmit: (oldOwner: string, newOwner: string) => void\n  oldAddress: string\n}\n\nconst SwapOwnerModal: React.FC<Interface> = ({ oldAddress, handleError, handleSubmit }) => {\n  const [newOwner, setNewOwner] = useState<string>('')\n\n  const validateAddress = () =>\n    isAddress(newOwner)\n      ? handleSubmit(oldAddress, newOwner.toLowerCase())\n      : handleError(new Error('Address is not valid'))\n\n  return (\n    <div>\n      <h3>Swap Owner</h3>\n      <p>Swap address for a new one.</p>\n      <label>Old Address:</label>\n      <span className=\"readonly\">{oldAddress}</span>\n      <label>New Owner</label>\n      <input type=\"text\" className=\"newAddress\" value={newOwner} onChange={evt => setNewOwner(evt.target.value)} />\n\n      <p><button onClick={validateAddress}>Swap Address</button></p>\n    </div>\n  )\n}\n\nexport default SwapOwnerModal\n","export default __webpack_public_path__ + \"static/media/delete.8970c03e.svg\";","export default __webpack_public_path__ + \"static/media/swap.29d1f400.svg\";","export default __webpack_public_path__ + \"static/media/edit.d3af4af9.svg\";","import React, { useEffect, useState } from 'react'\nimport { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport ValueWithButtons from '../../../components/ValueWithButtons'\nimport ChangeThresholdModal from './ChangeThresholdModal'\nimport AddOwnerModal from './AddOwnerModal'\nimport RemoveOwnerModal from './RemoveOwnerModal'\nimport SwapOwnerModal from './SwapOwnerModal'\nimport Modal from '../../../components/Modal'\nimport deleteIcon from '../../../images/delete.svg'\nimport swapIcon from '../../../images/swap.svg'\nimport editIcon from '../../../images/edit.svg'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error) => void\n  addTransaction: (transaction: SafeTransaction) => void\n}\n\nconst PolicyComponent: React.FC<Interface> = ({ safe, addTransaction, handleError }) => {\n  // Safe variables:\n  const [owners, setOwners] = useState<string[]>([])\n  const [threshold, setThreshold] = useState<number>(0)\n\n  // UI components:\n  const [addNewOwner, setAddNewOwner] = useState<boolean>(false)\n  const [changeThreshold, setChangeThreshold] = useState<boolean>(false)\n  const [removeOwner, setRemoveOwner] = useState<null | string>(null)\n  const [swapOwner, setSwapOwner] = useState<null | string>(null)\n\n  useEffect(() => {\n    safe.getOwners().then((owners: string[]) => setOwners(owners))\n    safe.getThreshold().then((result: number) => setThreshold(result))\n  }, [safe])\n\n  // Create transaction for changing the thresold:\n  const changeThresholdFunction = (newThreshold: number) =>\n    safe.getChangeThresholdTx(newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // Add an owner and update threshold:\n  const addOwnerFunction = (newOwner: string, newThreshold: number) =>\n    safe.getAddOwnerTx(newOwner, newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // remove an owner and update the threshold:\n  const removeOwnerFunction = (removeOwner: string, newThreshold: number) =>\n    safe.getRemoveOwnerTx(removeOwner, newThreshold)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // swap one owner for another:\n  const swapOwnerFunction = (swapOwner: string, newOwner: string) =>\n    safe.getSwapOwnerTx(swapOwner, newOwner)\n      .then((transaction: SafeTransaction) => {\n        addTransaction(transaction)\n        afterTransaction()\n      })\n      .catch(handleError)\n\n  // close ALL modals\n  const afterTransaction = () => {\n    setAddNewOwner(false)\n    setChangeThreshold(false)\n    setRemoveOwner(null)\n    setSwapOwner(null)\n  }\n\n  return (\n    <section className=\"section panel\">\n      <h2>Safe Policy</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Owners</th>\n            <td>\n              <ul>\n                {owners.map((owner: string) => (\n                  <li key={owner} >\n                    <ValueWithButtons value={owner} />\n                    <button className=\"icon delete\" onClick={() => setRemoveOwner(owner)}>\n                      <img src={deleteIcon} alt=\"delete address\" />\n                    </button>\n                    <button className=\"icon\" onClick={() => setSwapOwner(owner)}>\n                      <img src={swapIcon} alt=\"swap address\" />\n                    </button>\n                  </li>\n                ))}\n              </ul>\n              <button onClick={() => setAddNewOwner(true)}>+ Add Owner</button>\n            </td>\n          </tr>\n          <tr className=\"text\">\n            <th>Threshold</th>\n            <td>\n              {threshold}\n              <button className=\"icon\" onClick={() => setChangeThreshold(true)}>\n                <img src={editIcon} alt=\"edit threshold\" />\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      {changeThreshold && <Modal handleClose={() => setChangeThreshold(false)}><ChangeThresholdModal numberOfOwners={owners.length} currentThreshold={threshold} handleSubmit={changeThresholdFunction} /></Modal>}\n      {addNewOwner && <Modal handleClose={() => setAddNewOwner(false)}><AddOwnerModal numberOfOwners={owners.length} handleSubmit={addOwnerFunction} handleError={handleError} /></Modal>}\n      {removeOwner && <Modal handleClose={() => setRemoveOwner(null)}><RemoveOwnerModal removeAddress={removeOwner} numberOfOwners={owners.length} handleSubmit={removeOwnerFunction} /></Modal>}\n      {swapOwner && <Modal handleClose={() => setSwapOwner(null)}><SwapOwnerModal oldAddress={swapOwner} handleSubmit={swapOwnerFunction} handleError={handleError} /></Modal>}\n    </section>\n  )\n}\n\nexport default PolicyComponent\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\n\ninterface Interface {\n  createTransaction: (recipient: string, amount: number, data: string) => void\n  handleError: (error: Error | null) => void\n}\n\nconst TransferValueModal: React.FC<Interface> = ({ createTransaction, handleError }) => {\n  const [transaction, setTransaction] = useState<{amount: number, address: string, data: string}>({ amount: 10000, address: '', data: '' })\n\n  const validateTransaction = () => {\n    handleError(null)\n\n    if (!isAddress(transaction.address)) {\n      return handleError(new Error('Recipient is not an address.'))\n    }\n\n    const formattedData = transaction.data === '' ? '0x' : transaction.data\n    createTransaction(\n      transaction.address.toLowerCase(),\n      transaction.amount,\n      formattedData\n    )\n  }\n\n  return (\n    <>\n      <h3>Create Transaction</h3>\n      <p>\n        <label>Recepient address:</label>\n        <input type=\"text\" className=\"to\" value={transaction.address} onChange={evt => setTransaction({ ...transaction, address: evt.target.value })} />\n      </p>\n      <p>\n        <label>Amount:</label>\n        <input type=\"number\" className=\"amount\" value={transaction.amount} onChange={evt => setTransaction({ ...transaction, amount: parseInt(evt.target.value) })} />\n      </p>\n      <p>\n        <label>\n          Data: (optional field used for advanced transactions)\n        </label>\n        <textarea className=\"data\" value={transaction.data} onChange={evt => setTransaction({ ...transaction, data: evt.target.value })} />\n      </p>\n      <button className=\"submit\" onClick={validateTransaction}>Create Transaction</button>\n    </>\n  )\n}\n\nexport default TransferValueModal\n","import { isAddress } from '@ethersproject/address'\nimport React, { useState } from 'react'\nimport { Erc20Token } from '.'\n\ninterface Interface {\n  token: Erc20Token\n  handleError: (err: Error | null) => void\n  createTransaction: (token: Erc20Token, amount: number, to: string) => void\n}\n\nconst TransferTokenModal: React.FC<Interface> = ({ token, createTransaction, handleError }) => {\n  const [transaction, setTransaction] = useState<{amount: number, address: string}>({ amount: 0, address: '' })\n\n  const validateTransaction = () => {\n    handleError(null)\n\n    if (!isAddress(transaction.address)) {\n      return handleError(new Error('Recipient is not an address.'))\n    }\n\n    if (transaction.amount > token.amount || transaction.amount < 1) {\n      return handleError(new Error(`Amount should be between 1 and ${token.amount}.`))\n    }\n\n    return createTransaction(token, transaction.amount, transaction.address.toLowerCase())\n  }\n\n  return (\n    <div>\n      <h2>Transfer ERC20 Token: {token.symbol}</h2>\n      <p>\n        <label>You have:</label>\n        <span className=\"readonly\">{token.amount}</span>\n      </p>\n      <p>\n        <label>Amount to sent:</label>\n        <input type=\"number\" className=\"amount\" value={transaction.amount} onChange={evt => setTransaction({ ...transaction, amount: parseInt(evt.target.value) })} />\n      </p>\n      <p>\n        <label>Recipient address:</label>\n        <input type=\"string\" className=\"recipient\" value={transaction.address} onChange={evt => setTransaction({ ...transaction, address: evt.target.value })} />\n      </p>\n      <p>\n        <button className=\"submit\" onClick={validateTransaction}>\n          Create Transaction\n        </button>\n      </p>\n    </div>\n  )\n}\n\nexport default TransferTokenModal\n","import local from './local.json'\nimport testnet from './testnet.json'\n\nexport const getContracts = (chainId: number) => {\n  switch (chainId) {\n    case 31: return testnet\n    default: return local\n  }\n}\n","import { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport { ERC20TransactionBuilder } from '@rsksmart/safe-transactions-sdk'\nimport { BigNumber, Contract } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport Modal from '../../../components/Modal'\nimport TransferValueModal from './TransferValueModal'\nimport erc20Abi from './erc20.json'\nimport refreshIcon from '../../../images/refresh.svg'\nimport TransferTokenModal from './TransferTokenModal'\nimport { getContracts } from '../../../config'\n\ninterface Interface {\n  safe: Safe\n  handleError: (err: Error | null) => void\n  addTransaction: (transaction: SafeTransaction) => void\n}\n\nexport interface Erc20Token {\n  symbol: string\n  decimals: number\n  amount: number\n  contractAddress: string\n}\n\nconst AssetsComponent: React.FC<Interface> = ({ safe, addTransaction, handleError }) => {\n  const [showTransfer, setShowTransfer] = useState<boolean>(false)\n  const [showTokenTransfer, setShowTokenTransfer] = useState<Erc20Token | null>(null)\n\n  const [balance, setBalance] = useState<string>('0')\n  const [tokens, setTokens] = useState<any[]>([])\n\n  useEffect(() => {\n    getSafeBalance()\n\n    safe.getChainId().then((chainId: number) =>\n      getERC2Balance({ symbol: 'tRIF', decimals: 18, amount: 0, contractAddress: getContracts(chainId).rifToken }))\n  }, [safe])\n\n  const getSafeBalance = () => safe.getBalance().then((balance: BigNumber) => setBalance(balance.toString()))\n\n  const getERC2Balance = (token: Erc20Token) => {\n    const signer = safe.getSigner()\n    const contract = new Contract(token.contractAddress, erc20Abi, signer)\n    contract.balanceOf(safe.getAddress())\n      .then((result: BigNumber) => result.toString())\n      .then((result: string) => {\n        const updateToken = { ...token, amount: parseInt(result) / Math.pow(10, 18) }\n        const isListed = tokens.find((findToken: Erc20Token) => findToken.symbol === token.symbol)\n\n        const newTokenList = isListed\n          ? tokens.map((findToken: Erc20Token) => findToken.symbol === token.symbol ? updateToken : findToken)\n          : [...tokens, updateToken]\n\n        setTokens(newTokenList)\n      })\n      .catch((err: Error) => console.log('error', err))\n  }\n\n  // Create transaction to send rbtc or data\n  const createTransaction = (to: string, amount: number, data: string) => {\n    handleError(null)\n    safe.createTransaction({\n      to,\n      value: amount.toString(),\n      data\n    })\n      .then((transaction: SafeTransaction) => addTransaction(transaction))\n      .catch(handleError)\n      .finally(() => setShowTransfer(false))\n  }\n\n  // Create transaction to send an ERC20 token:\n  const createTokenTransaction = (token: Erc20Token, amount: number, to: string) => {\n    handleError(null)\n\n    ERC20TransactionBuilder.create(safe, token.contractAddress).then((txBuilder: ERC20TransactionBuilder) => {\n      const bigAmount = BigNumber.from(amount).mul(BigNumber.from(10).pow(token.decimals))\n\n      txBuilder.transfer(to, bigAmount)\n        .then((transaction: SafeTransaction) => addTransaction(transaction))\n        .catch(handleError)\n        .finally(() => setShowTokenTransfer(null))\n    })\n  }\n\n  return (\n    <>\n      <div className=\"panel\">\n        <h2>Assets</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Asset</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><p>rBTC</p></td>\n              <td>\n                <p>\n                  {(parseInt(balance) / 1000000000000000000).toString()}\n                  <button className=\"icon\" onClick={getSafeBalance}>\n                    <img src={refreshIcon} alt=\"refresh balance\" />\n                  </button>\n                  <button className=\"icon\" onClick={() => setShowTransfer(true)}>transfer</button>\n                </p>\n              </td>\n            </tr>\n            {tokens.map((token: any) => (\n              <tr key={token.contractAddress}>\n                <td><p>{token.symbol}</p></td>\n                <td>\n                  {token.amount}\n                  <button className=\"icon\" onClick={() => getERC2Balance(token)}>\n                    <img src={refreshIcon} alt=\"refresh balance\" />\n                  </button>\n                  <button className=\"icon\" onClick={() => setShowTokenTransfer(token)}>\n                    transfer\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {showTransfer && (\n        <Modal handleClose={() => setShowTransfer(false)}>\n          <TransferValueModal\n            createTransaction={createTransaction}\n            handleError={handleError}\n          />\n        </Modal>\n      )}\n      {showTokenTransfer && (\n        <Modal handleClose={() => setShowTokenTransfer(null)}>\n          <TransferTokenModal\n            token={showTokenTransfer}\n            handleError={handleError}\n            createTransaction={createTokenTransaction}\n          />\n        </Modal>\n      )}\n    </>\n  )\n}\n\nexport default AssetsComponent\n","import React from 'react'\nimport Modal from './Modal'\n\ninterface Interface {\n  closeModal: () => void\n  changeScreen: () => void\n}\n\nconst TransactionCreatedModal: React.FC<Interface> = ({ closeModal, changeScreen }) => {\n  return (\n    <Modal handleClose={closeModal}>\n      <h2>Transaction Created</h2>\n      <p>A transaction has been created and added to the transaction panel. You can sign the transaction there, and when enough signatures are collected, execute it.</p>\n      <p>\n        <button onClick={changeScreen}>View Transactions</button>\n      </p>\n    </Modal>\n  )\n}\n\nexport default TransactionCreatedModal\n","// Adapter between the transaction service (and localStorage) and this app\n\nimport { SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport { TransactionStatus } from '../constants'\nimport { TransactionBundle } from '../pages/safeInteraction'\n\n// source: https://docs.gnosis.io/safe/docs/services_transactions/\ninterface TransactionServiceResponse {\n  'safe': string, // '<address>',\n  'to': string, // '<address>',\n  'value': string, // '<stringified-int>',\n  'data': string, // '<hex>',\n  'operation': number, // '<int>',\n  'gasToken': string, // '<address>',\n  'safeTxGas': string, // '<stringified-int>',\n  'baseGas': string, // '<stringified-int>',\n  'gasPrice': string, // '<stringified-int>',\n  'refundReceiver'?: string, // '<address>',\n  'nonce': number, // '<int>',\n  'safeTxHash': string, // '<hex>',\n  'blockNumber'?: number, // '<int>',\n  'transactionHash'?: string, // '<hex>',\n  'submissionDate'?: string, // '<string>',\n  'isExecuted': boolean // '<bool>',\n  'isSuccesful': boolean // '<bool>',\n  'executionDate'?: string, // '<string>',\n  'executor'?: string, // '<address>',\n  'confirmations'?: string[], // ['<address>'],\n  'signatures'?: string, // '<hex>'\n}\n\nexport const bundleToService = (bundle: TransactionBundle, safeAddress: string) => {\n  const response:TransactionServiceResponse = {\n    safe: safeAddress,\n    ...bundle.transaction.data,\n    safeTxGas: bundle.transaction.data.safeTxGas.toString(),\n    baseGas: bundle.transaction.data.baseGas.toString(),\n    gasPrice: bundle.transaction.data.gasPrice.toString(),\n    safeTxHash: bundle.hash,\n    isExecuted: bundle.status === TransactionStatus.EXECUTED,\n    isSuccesful: bundle.status === TransactionStatus.EXECUTED\n  }\n\n  return response\n}\n\nexport const serviceToBundle = (transaction: TransactionServiceResponse, safeAddress: string) => {\n  const safeTransaction = new SafeTransaction({\n    to: transaction.to,\n    value: transaction.value,\n    data: transaction.data,\n    safeTxGas: parseInt(transaction.safeTxGas),\n    baseGas: parseInt(transaction.baseGas),\n    gasPrice: parseInt(transaction.gasPrice),\n    nonce: transaction.nonce,\n    operation: transaction.operation,\n    gasToken: transaction.gasToken,\n    refundReceiver: transaction.refundReceiver || ''\n  })\n\n  const isReject = (transaction.to === safeAddress && transaction.value === '0' && transaction.data === '0x')\n\n  const bundle:TransactionBundle = ({\n    transaction: safeTransaction,\n    status: transaction.isExecuted ? TransactionStatus.EXECUTED : TransactionStatus.PENDING,\n    hash: transaction.safeTxHash,\n    isReject\n  })\n\n  return bundle\n}\n\nexport const bundleToServiceArray = (bundles: TransactionBundle[], safeAddress: string) => {\n  const serviceArray: TransactionServiceResponse[] = []\n  bundles.map((bundle: TransactionBundle) => serviceArray.push(bundleToService(bundle, safeAddress)))\n  return serviceArray\n}\n\nexport const serviceToBundles = (serviceResponse: TransactionServiceResponse[], safeAddress: string) => {\n  const bundles: TransactionBundle[] = []\n  serviceResponse.map((response: TransactionServiceResponse) => bundles.push(serviceToBundle(response, safeAddress)))\n  return bundles\n}\n","import React, { useState, useEffect } from 'react'\nimport { Safe, SafeTransaction } from '@gnosis.pm/safe-core-sdk'\nimport Navigation from './Navigation'\nimport TransactionsPanel from './transactions'\nimport Dashboard from './Dashboard'\nimport PolicyComponent from './policies'\nimport AssetsComponent from './assets'\nimport TransactionCreatedModal from '../../components/TransactionCreatedModal'\nimport { Screens, TransactionStatus } from '../../constants'\nimport { saveTransactionsToLocalStorage, getTransactionsFromLocalStorage } from '../../helpers/localStorage'\n\ninterface Interface {\n  safe: Safe\n  walletAddress: string\n  handleLogout: () => void\n  handleError: (err: Error | null) => void\n}\n\n// Wrapper for transaction to keep track of the status, and hash to be used as an identifier\nexport interface TransactionBundle {\n  transaction: SafeTransaction\n  hash: string\n  status: TransactionStatus\n  isReject: boolean\n}\n\nconst SafeInteraction: React.FC<Interface> = ({ safe, walletAddress, handleError, handleLogout }) => {\n  // UI Only\n  const [selectedTab, setSelectedTab] = useState<Screens>(Screens.DASHBOARD)\n  const [showTransactionInfo, setShowTransactionInfo] = useState<boolean>(false)\n  const changeActive = (screen: Screens) => setSelectedTab(screen)\n\n  // Keep track of the Apps transaction nonce, starting with the safe's nonce\n  const [appNonce, setAppNonce] = useState(0)\n\n  useEffect(() => {\n    safe.getNonce().then((nonce: number) => {\n      setAppNonce(nonce)\n\n      if (nonce !== 0) {\n        const serviceResponse = getTransactionsFromLocalStorage(safe.getAddress())\n        if (serviceResponse) {\n          setTransactions(serviceResponse)\n          // set the App's nonce to the last transaction's nonce +1:\n          setAppNonce(serviceResponse[serviceResponse.length - 1].transaction.data.nonce + 1)\n        }\n      }\n    })\n  }, [safe])\n\n  // Transaction Management, all transactions:\n  const [transactions, setTransactions] = useState<TransactionBundle[]>([])\n\n  // Add a new PENDING transaction to the list\n  const addTransaction = (incomingTransaction: SafeTransaction, isReject?: boolean) => {\n    // set the correct nonce if there are pending transactions:\n    const transaction = !isReject\n      ? new SafeTransaction({ ...incomingTransaction.data, nonce: appNonce })\n      : incomingTransaction\n\n    // get the hash to be used as an identifier\n    safe.getTransactionHash(transaction)\n      .then((hash: string) => {\n        // create new transaction list\n        const newTransactionList = [...transactions, { status: TransactionStatus.PENDING, transaction, hash, isReject: isReject || false }]\n\n        // sort the order of transactions by nonce:\n        const nonceSorted = newTransactionList.sort((a: TransactionBundle, b: TransactionBundle) =>\n          (a.transaction.data.nonce > b.transaction.data.nonce) ? 1 : -1)\n\n        // set the sorted transactions\n        setTransactions(nonceSorted)\n        setShowTransactionInfo(true)\n\n        // save list to localstorage\n        saveTransactionsToLocalStorage(nonceSorted, safe.getAddress())\n\n        // increase the app's nonce by 1 if it isn't a reject transaction\n        !isReject && setAppNonce(appNonce + 1)\n      })\n  }\n\n  // update a transaction bundle\n  const updateTransactionBundle = (transactionBundle: TransactionBundle) => {\n    let list = transactions.map((bundle: TransactionBundle) =>\n      bundle.hash === transactionBundle.hash ? transactionBundle : bundle)\n\n    // if the status is EXECUTED, then also update other transactions with the same nonce to REJECTED:\n    if (transactionBundle.status === TransactionStatus.EXECUTED) {\n      list = list.map((bundle: TransactionBundle) =>\n        (bundle.transaction.data.nonce === transactionBundle.transaction.data.nonce &&\n          bundle.status === TransactionStatus.PENDING)\n          ? { ...bundle, status: TransactionStatus.REJECTED } : bundle\n      )\n    }\n\n    setTransactions(list)\n\n    // save list to localstorage if not a Rejected transaction\n    status !== TransactionStatus.REJECTED &&\n      saveTransactionsToLocalStorage(list, safe.getAddress())\n  }\n\n  const closeModalAndSwitchScreen = () => {\n    setShowTransactionInfo(false)\n    setSelectedTab(Screens.TRANSACTIONS)\n  }\n\n  return (\n    <section className=\"selectedSafe\">\n      <Navigation handleLogout={handleLogout} changeActive={changeActive} selected={selectedTab} />\n      {selectedTab === Screens.DASHBOARD && <Dashboard safe={safe} />}\n      {selectedTab === Screens.TRANSACTIONS && (\n        <TransactionsPanel\n          safe={safe}\n          transactions={transactions}\n          handleError={handleError}\n          addTransaction={addTransaction}\n          updateTransactionBundle={updateTransactionBundle}\n          walletAddress={walletAddress} />\n      )}\n      {selectedTab === Screens.ASSETS && <AssetsComponent safe={safe} handleError={handleError} addTransaction={addTransaction} />}\n      {selectedTab === Screens.POLICY && <PolicyComponent safe={safe} addTransaction={addTransaction} handleError={handleError} />}\n\n      {showTransactionInfo && <TransactionCreatedModal closeModal={() => setShowTransactionInfo(false)} changeScreen={closeModalAndSwitchScreen} />}\n    </section>\n  )\n}\n\nexport default SafeInteraction\n","import React, { useState } from 'react'\nimport { isAddress } from '@ethersproject/address'\n\ninterface Interface {\n  connectAddress: string | null\n  handleError: (error: Error) => void\n  createSafe: (addresses: string[], threshold: number) => void\n}\n\nconst CreateSafeComponent: React.FC<Interface> = ({ connectAddress, createSafe, handleError }) => {\n  const [addresses, setAddresses] = useState<string[]>([connectAddress ? connectAddress.toLowerCase() : ''])\n  const [threshold, setThreshold] = useState<number>(1)\n\n  const changeAddressValue = (evt: any) => {\n    const changeIndex = parseInt(evt.target.id.replace('address', ''))\n    const updateList = addresses.map((item: string, index: number) => index === changeIndex ? evt.target.value.toLowerCase() : item)\n    setAddresses(updateList)\n  }\n\n  const removeAddress = (changeIndex: number) => {\n    const updateList = addresses.filter((_item: string, index: number) => index !== changeIndex)\n    setAddresses(updateList)\n  }\n\n  const validateSafeSettings = () => {\n    const errorList: number[] = []\n    addresses.forEach((address: string, index: number) => {\n      if (!isAddress(address)) {\n        errorList.push(index + 1)\n      }\n    })\n\n    if (errorList.length !== 0) {\n      handleError(new Error(`Incorrect Addresses for: ${errorList.toString()}`))\n      return false\n    }\n\n    createSafe(addresses, threshold)\n  }\n\n  const loopOptions = (length: number) => {\n    const items = []\n    for (let index = 0; index < length; index++) {\n      items.push(<option key={index} value={index + 1}>{index + 1}</option>)\n    }\n    return items\n  }\n\n  return (\n    <div>\n      <h4>Create a new safe</h4>\n      <p>\n        A safe can have any number of owners associated with it. Your connected address has been added as the first account.<br/>\n        Click the <em>Add address</em> button to add additional addresses, and the <em>delete button</em> to remove addresses.\n      </p>\n\n      <ul>\n        {addresses.map((address: string, index: number) => (\n          <li key={index}>\n            <label>Address {index + 1}: </label>\n            <input type=\"text\"\n              id={`address${index}`}\n              value={address}\n              onChange={changeAddressValue}\n              className={`address${index}`}\n            />\n            <button className={`removeAddress${index}`} onClick={() => removeAddress(index)}>delete</button>\n          </li>\n        ))}\n      </ul>\n      <button className=\"addAddress\" onClick={() => setAddresses([...addresses, ''])}>Add address</button>\n\n      <p>Transactions require the confirmation of at least{' '}\n        <select className=\"threshold\" value={threshold.toString()} onChange={evt => setThreshold(parseInt(evt.target.value))}>\n          {loopOptions(addresses.length)}\n        </select>\n        signatures.\n      </p>\n      <button className=\"submit\" disabled={addresses.length === 0} onClick={validateSafeSettings}>Create Safe</button>\n    </div>\n  )\n}\n\nexport default CreateSafeComponent\n","import React, { useState } from 'react'\n\ninterface Interface {\n  connectToSafe: (safeAddress: string) => void\n  pastSafes: string[]\n}\n\nconst ConnectToSafeComponent: React.FC<Interface> = ({ connectToSafe, pastSafes }) => {\n  const [safeAddress, setSafeAddress] = useState<string>('')\n\n  return (\n    <div>\n      <h3>Connect to an existing safe</h3>\n      <label>Safe address</label>\n      <input className=\"safeAddress\" type=\"text\" value={safeAddress} onChange={evt => setSafeAddress(evt.target.value)} />\n      <button className=\"connect\" onClick={() => connectToSafe(safeAddress)}>Connect</button>\n\n      {pastSafes && pastSafes.length !== 0 && (\n        <>\n          <h4>Past Safes:</h4>\n          <ul>\n            {pastSafes.map((address: string) => (\n              <li key={address}>\n                <button\n                  className=\"icon\"\n                  onClick={() => connectToSafe(address)}>{address}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default ConnectToSafeComponent\n","import React, { useState, useEffect } from 'react'\nimport EthersSafe, { Safe } from '@gnosis.pm/safe-core-sdk'\nimport { EthersSafeFactory } from '@rsksmart/safe-factory-sdk'\nimport { ethers } from 'ethers'\n\nimport CreateSafeComponent from './CreateSafeComponent'\nimport ConnectToSafeComponent from './ConnectToSafeComponent'\nimport { getContracts } from '../../config'\nimport LoadingComponent from '../../components/LoadingComponent'\nimport { getKey, LocalStorageKeys } from '../../helpers/localStorage'\n\ninterface Interface {\n  web3Provider: any\n  chainId: number\n  handleSetSafe: (safe: Safe | EthersSafe) => any\n  handleError: (error: Error) => void\n  address: string | null\n}\n\nconst ChooseSafe: React.FC<Interface> = ({ web3Provider, chainId, handleSetSafe, handleError, address }) => {\n  // UI variables\n  const [isCreate, setIsCreate] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [pastSafes, setPastSafes] = useState<string[]>([])\n\n  useEffect(() => { setPastSafes(getKey(LocalStorageKeys.SAFES, chainId)) }, [])\n\n  // Create a new safe:\n  const createSafe = (addresses: string[], threshold: number) => {\n    setIsLoading(true)\n\n    const contracts = getContracts(chainId)\n    const provider = new ethers.providers.Web3Provider(web3Provider)\n\n    const signer = provider.getSigner()\n\n    const safeFactory = new EthersSafeFactory(\n      signer,\n      contracts.proxyFactoryAddress.toLowerCase(),\n      contracts.safeSingletonAddress.toLowerCase()\n    )\n\n    safeFactory.createSafe({ owners: addresses, threshold })\n      .then(handleSetSafe)\n      .catch(handleError)\n      .finally(() => setIsLoading(false))\n  }\n\n  // Connect to an existing safe:\n  const connectToSafe = (safeAddress: string) => {\n    setIsLoading(true)\n\n    const provider = new ethers.providers.Web3Provider(web3Provider)\n    const signer = provider.getSigner()\n\n    EthersSafe.create(ethers, safeAddress.toLowerCase(), signer)\n      .then(handleSetSafe)\n      .catch(handleError)\n      .finally(() => setIsLoading(false))\n  }\n\n  return isLoading ? <LoadingComponent />\n    : (\n      <section className=\"connect panel\">\n        <h2>\n        Create a safe, or connect to an existing one\n          <button onClick={() => setIsCreate(!isCreate)}>\n            {isCreate ? 'Connect to Safe' : 'Create Safe'}\n          </button>\n        </h2>\n        {isCreate ? (\n          <CreateSafeComponent\n            createSafe={createSafe}\n            handleError={handleError}\n            connectAddress={address}\n          />\n        ) : (\n          <ConnectToSafeComponent\n            pastSafes={pastSafes}\n            connectToSafe={connectToSafe}\n          />\n        )}\n      </section>\n    )\n}\n\nexport default ChooseSafe\n","import React from 'react'\nimport { version } from '../../package.json'\n\nconst FooterComponent: React.FC = () => {\n  return (\n    <section className=\"footer\">\n      <p>This is a sample app and does not save transactions outside of the state. If you refresh the app, or log in with a different account, the transactions will be cleared.</p>\n      <p>Copyright © 2021 IOV Labs. All rights reserved.</p>\n      <p>Version: {version}</p>\n    </section>\n  )\n}\n\nexport default FooterComponent\n","import React, { useState } from 'react'\nimport RLogin from '@rsksmart/rlogin'\nimport { Safe } from '@gnosis.pm/safe-core-sdk'\n\nimport './styles/App.scss'\nimport Web3Provider from './pages/start/ConnectWalletComponent'\nimport ConnectedBar from './components/ConnectedBar'\nimport SafeInteraction from './pages/safeInteraction'\nimport ChooseSafe from './pages/connectToSafe'\nimport FooterComponent from './components/FooterComponent'\nimport { saveSafeAddresToLocalStorage } from './helpers/localStorage'\n\nconst rLogin = new RLogin({\n  cacheProvider: false,\n  supportedChains: [31, 1337]\n})\n\nfunction App () {\n  const [error, setError] = useState<null | string>('')\n\n  // Web3Provider and Safe variables\n  const [rLoginResponse, setRLoginResponse] = useState<{ provider: any, disconnect: any } | null>(null)\n  const [safe, setSafe] = useState<Safe | null>(null)\n\n  // provider variables\n  const [address, setAddress] = useState<string | null>(null)\n  const [chainId, setChainId] = useState<number | null>(null)\n\n  const web3ProviderResponse = (response: any, address: string, chainId: number) => {\n    setRLoginResponse(response)\n    setAddress(address)\n    setChainId(chainId)\n\n    // listen for address change and update:\n    response.provider.on('accountsChanged', (accounts: string[]) => setAddress(accounts[0]))\n  }\n\n  const handleSetSafe = (safe: Safe) => {\n    setSafe(safe)\n    handleError(null)\n    chainId && saveSafeAddresToLocalStorage(safe.getAddress(), chainId)\n  }\n\n  const handleError = (error: Error | null) => error ? setError(error.message) : setError(null)\n\n  const handleLogout = () => {\n    rLoginResponse?.disconnect()\n    setRLoginResponse(null)\n    setSafe(null)\n    setError(null)\n    setAddress(null)\n    setChainId(null)\n  }\n\n  return (\n    <div className={rLoginResponse ? 'App' : 'App signin'}>\n      {!rLoginResponse ? (\n        <Web3Provider\n          rLogin={rLogin}\n          setRLoginResponse={web3ProviderResponse}\n          handleError={handleError}\n        />\n      ) : <ConnectedBar chainId={chainId} walletAddress={address} />\n      }\n\n      {error && (\n        <section className=\"error\">\n          <p>{error}</p>\n          <button onClick={() => handleError(null)}>x</button>\n        </section>\n      )}\n\n      {rLoginResponse && chainId && !safe && (\n        <ChooseSafe\n          web3Provider={rLoginResponse.provider}\n          chainId={chainId}\n          handleSetSafe={handleSetSafe}\n          handleError={handleError}\n          address={address}\n        />\n      )}\n\n      {rLoginResponse && address && safe && (\n        <SafeInteraction\n          safe={safe}\n          walletAddress={address}\n          handleLogout={handleLogout}\n          handleError={handleError}\n        />\n      )}\n\n      {rLoginResponse && <FooterComponent />}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}